
Not-so-smatrLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005770  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059bc  080059bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080059bc  080059bc  000159bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c4  080059c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c4  080059c4  000159c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059c8  080059c8  000159c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080059cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000000c  080059d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080059d8  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c65  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ab  00000000  00000000  00034ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00037450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  000384c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b2bd  00000000  00000000  00039438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015326  00000000  00000000  000646f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010935a  00000000  00000000  00079a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00182d75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004498  00000000  00000000  00182dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005914 	.word	0x08005914

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08005914 	.word	0x08005914

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <MX_DMA_Init+0x50>)
 8000508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800050a:	4a11      	ldr	r2, [pc, #68]	; (8000550 <MX_DMA_Init+0x50>)
 800050c:	f043 0304 	orr.w	r3, r3, #4
 8000510:	6493      	str	r3, [r2, #72]	; 0x48
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_DMA_Init+0x50>)
 8000514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000516:	f003 0304 	and.w	r3, r3, #4
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_DMA_Init+0x50>)
 8000520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000522:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <MX_DMA_Init+0x50>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6493      	str	r3, [r2, #72]	; 0x48
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_DMA_Init+0x50>)
 800052c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	200b      	movs	r0, #11
 800053c:	f000 fd6f 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000540:	200b      	movs	r0, #11
 8000542:	f000 fd88 	bl	8001056 <HAL_NVIC_EnableIRQ>

}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000

08000554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	; 0x28
 8000558:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	4b24      	ldr	r3, [pc, #144]	; (80005fc <MX_GPIO_Init+0xa8>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	4a23      	ldr	r2, [pc, #140]	; (80005fc <MX_GPIO_Init+0xa8>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000576:	4b21      	ldr	r3, [pc, #132]	; (80005fc <MX_GPIO_Init+0xa8>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000582:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <MX_GPIO_Init+0xa8>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	4a1d      	ldr	r2, [pc, #116]	; (80005fc <MX_GPIO_Init+0xa8>)
 8000588:	f043 0302 	orr.w	r3, r3, #2
 800058c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058e:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <MX_GPIO_Init+0xa8>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	f003 0302 	and.w	r3, r3, #2
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b18      	ldr	r3, [pc, #96]	; (80005fc <MX_GPIO_Init+0xa8>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a17      	ldr	r2, [pc, #92]	; (80005fc <MX_GPIO_Init+0xa8>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <MX_GPIO_Init+0xa8>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <MX_GPIO_Init+0xa8>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a11      	ldr	r2, [pc, #68]	; (80005fc <MX_GPIO_Init+0xa8>)
 80005b8:	f043 0308 	orr.w	r3, r3, #8
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <MX_GPIO_Init+0xa8>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0308 	and.w	r3, r3, #8
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <MX_GPIO_Init+0xac>)
 80005d2:	f001 fa27 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 80005d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2300      	movs	r3, #0
 80005e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <MX_GPIO_Init+0xac>)
 80005f0:	f001 f886 	bl	8001700 <HAL_GPIO_Init>

}
 80005f4:	bf00      	nop
 80005f6:	3728      	adds	r7, #40	; 0x28
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000
 8000600:	48000400 	.word	0x48000400

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fbb9 	bl	8000d7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f820 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f7ff ffa0 	bl	8000554 <MX_GPIO_Init>
  MX_DMA_Init();
 8000614:	f7ff ff74 	bl	8000500 <MX_DMA_Init>
  MX_TIM1_Init();
 8000618:	f000 fa16 	bl	8000a48 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800061c:	f000 faa6 	bl	8000b6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000620:	4808      	ldr	r0, [pc, #32]	; (8000644 <main+0x40>)
 8000622:	f002 ff3d 	bl	80034a0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart2, rx_buff, Rx_Size);
 8000626:	2240      	movs	r2, #64	; 0x40
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <main+0x44>)
 800062a:	4808      	ldr	r0, [pc, #32]	; (800064c <main+0x48>)
 800062c:	f003 fbe2 	bl	8003df4 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <main+0x48>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <main+0x48>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f042 0210 	orr.w	r2, r2, #16
 800063e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x3c>
 8000642:	bf00      	nop
 8000644:	200000c0 	.word	0x200000c0
 8000648:	20000028 	.word	0x20000028
 800064c:	2000010c 	.word	0x2000010c

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b096      	sub	sp, #88	; 0x58
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2244      	movs	r2, #68	; 0x44
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 f874 	bl	800574c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	463b      	mov	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000672:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000676:	f001 fa27 	bl	8001ac8 <HAL_PWREx_ControlVoltageScaling>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000680:	f000 f900 	bl	8000884 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000684:	2310      	movs	r3, #16
 8000686:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000698:	2301      	movs	r3, #1
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80006a0:	2314      	movs	r3, #20
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 faab 	bl	8001c10 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006c0:	f000 f8e0 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2303      	movs	r3, #3
 80006ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	2103      	movs	r1, #3
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 feb1 	bl	8002444 <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006e8:	f000 f8cc 	bl	8000884 <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3758      	adds	r7, #88	; 0x58
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a05      	ldr	r2, [pc, #20]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d104      	bne.n	8000710 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8000706:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070a:	4804      	ldr	r0, [pc, #16]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800070c:	f001 f9a2 	bl	8001a54 <HAL_GPIO_TogglePin>
	}

}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40012c00 	.word	0x40012c00
 800071c:	48000400 	.word	0x48000400

08000720 <get_solve>:
void get_solve(uint8_t *data)
{
 8000720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	//origin data in buffer is in ASCLL
	memcpy(test_buff, data, Rx_Size);
 8000728:	4a4f      	ldr	r2, [pc, #316]	; (8000868 <get_solve+0x148>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	461c      	mov	r4, r3
 800072e:	4616      	mov	r6, r2
 8000730:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8000734:	4635      	mov	r5, r6
 8000736:	4623      	mov	r3, r4
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	6859      	ldr	r1, [r3, #4]
 800073c:	689a      	ldr	r2, [r3, #8]
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000742:	3410      	adds	r4, #16
 8000744:	3610      	adds	r6, #16
 8000746:	4564      	cmp	r4, ip
 8000748:	d1f4      	bne.n	8000734 <get_solve+0x14>
	if(test_buff[0] != 49 || test_buff[1] != 54 || test_buff[2] != 53)
 800074a:	4b47      	ldr	r3, [pc, #284]	; (8000868 <get_solve+0x148>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b31      	cmp	r3, #49	; 0x31
 8000750:	f040 8084 	bne.w	800085c <get_solve+0x13c>
 8000754:	4b44      	ldr	r3, [pc, #272]	; (8000868 <get_solve+0x148>)
 8000756:	785b      	ldrb	r3, [r3, #1]
 8000758:	2b36      	cmp	r3, #54	; 0x36
 800075a:	d17f      	bne.n	800085c <get_solve+0x13c>
 800075c:	4b42      	ldr	r3, [pc, #264]	; (8000868 <get_solve+0x148>)
 800075e:	789b      	ldrb	r3, [r3, #2]
 8000760:	2b35      	cmp	r3, #53	; 0x35
 8000762:	d17b      	bne.n	800085c <get_solve+0x13c>
		return;

	test_buff[4] -= 48;
 8000764:	4b40      	ldr	r3, [pc, #256]	; (8000868 <get_solve+0x148>)
 8000766:	791b      	ldrb	r3, [r3, #4]
 8000768:	3b30      	subs	r3, #48	; 0x30
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <get_solve+0x148>)
 800076e:	711a      	strb	r2, [r3, #4]
	test_buff[8] -= 48;
 8000770:	4b3d      	ldr	r3, [pc, #244]	; (8000868 <get_solve+0x148>)
 8000772:	7a1b      	ldrb	r3, [r3, #8]
 8000774:	3b30      	subs	r3, #48	; 0x30
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b3b      	ldr	r3, [pc, #236]	; (8000868 <get_solve+0x148>)
 800077a:	721a      	strb	r2, [r3, #8]
	test_buff[9] -= 48;
 800077c:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <get_solve+0x148>)
 800077e:	7a5b      	ldrb	r3, [r3, #9]
 8000780:	3b30      	subs	r3, #48	; 0x30
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b38      	ldr	r3, [pc, #224]	; (8000868 <get_solve+0x148>)
 8000786:	725a      	strb	r2, [r3, #9]
	test_buff[10] -= 48;
 8000788:	4b37      	ldr	r3, [pc, #220]	; (8000868 <get_solve+0x148>)
 800078a:	7a9b      	ldrb	r3, [r3, #10]
 800078c:	3b30      	subs	r3, #48	; 0x30
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b35      	ldr	r3, [pc, #212]	; (8000868 <get_solve+0x148>)
 8000792:	729a      	strb	r2, [r3, #10]
	test_buff[11] -= 48;
 8000794:	4b34      	ldr	r3, [pc, #208]	; (8000868 <get_solve+0x148>)
 8000796:	7adb      	ldrb	r3, [r3, #11]
 8000798:	3b30      	subs	r3, #48	; 0x30
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b32      	ldr	r3, [pc, #200]	; (8000868 <get_solve+0x148>)
 800079e:	72da      	strb	r2, [r3, #11]
	float temp = test_buff[8]*(1000) + test_buff[9]*(100) + test_buff[10]*(10) + test_buff[11]*(1);
 80007a0:	4b31      	ldr	r3, [pc, #196]	; (8000868 <get_solve+0x148>)
 80007a2:	7a1b      	ldrb	r3, [r3, #8]
 80007a4:	461a      	mov	r2, r3
 80007a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007aa:	fb03 f202 	mul.w	r2, r3, r2
 80007ae:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <get_solve+0x148>)
 80007b0:	7a5b      	ldrb	r3, [r3, #9]
 80007b2:	4619      	mov	r1, r3
 80007b4:	2364      	movs	r3, #100	; 0x64
 80007b6:	fb01 f303 	mul.w	r3, r1, r3
 80007ba:	441a      	add	r2, r3
 80007bc:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <get_solve+0x148>)
 80007be:	7a9b      	ldrb	r3, [r3, #10]
 80007c0:	4619      	mov	r1, r3
 80007c2:	460b      	mov	r3, r1
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	440b      	add	r3, r1
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	4413      	add	r3, r2
 80007cc:	4a26      	ldr	r2, [pc, #152]	; (8000868 <get_solve+0x148>)
 80007ce:	7ad2      	ldrb	r2, [r2, #11]
 80007d0:	4413      	add	r3, r2
 80007d2:	ee07 3a90 	vmov	s15, r3
 80007d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007da:	edc7 7a03 	vstr	s15, [r7, #12]

	switch(test_buff[4])
 80007de:	4b22      	ldr	r3, [pc, #136]	; (8000868 <get_solve+0x148>)
 80007e0:	791b      	ldrb	r3, [r3, #4]
 80007e2:	2b03      	cmp	r3, #3
 80007e4:	d036      	beq.n	8000854 <get_solve+0x134>
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	dc3a      	bgt.n	8000860 <get_solve+0x140>
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d002      	beq.n	80007f4 <get_solve+0xd4>
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d018      	beq.n	8000824 <get_solve+0x104>
			break;
		case 3:
			pose_z = temp;
			break;
		default:
			return;
 80007f2:	e035      	b.n	8000860 <get_solve+0x140>
			pose_x = temp;
 80007f4:	4a1d      	ldr	r2, [pc, #116]	; (800086c <get_solve+0x14c>)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	6013      	str	r3, [r2, #0]
			yaw = atanf((5000-pose_x)/5000);
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <get_solve+0x14c>)
 80007fc:	edd3 7a00 	vldr	s15, [r3]
 8000800:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000870 <get_solve+0x150>
 8000804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000808:	eddf 6a19 	vldr	s13, [pc, #100]	; 8000870 <get_solve+0x150>
 800080c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000810:	eeb0 0a47 	vmov.f32	s0, s14
 8000814:	f004 ffa2 	bl	800575c <atanf>
 8000818:	eef0 7a40 	vmov.f32	s15, s0
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <get_solve+0x154>)
 800081e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000822:	e01e      	b.n	8000862 <get_solve+0x142>
			pose_y = temp;
 8000824:	4a14      	ldr	r2, [pc, #80]	; (8000878 <get_solve+0x158>)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	6013      	str	r3, [r2, #0]
			pitch = atanf((5000-pose_y)/5000);
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <get_solve+0x158>)
 800082c:	edd3 7a00 	vldr	s15, [r3]
 8000830:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000870 <get_solve+0x150>
 8000834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000838:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000870 <get_solve+0x150>
 800083c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000840:	eeb0 0a47 	vmov.f32	s0, s14
 8000844:	f004 ff8a 	bl	800575c <atanf>
 8000848:	eef0 7a40 	vmov.f32	s15, s0
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <get_solve+0x15c>)
 800084e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000852:	e006      	b.n	8000862 <get_solve+0x142>
			pose_z = temp;
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <get_solve+0x160>)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	6013      	str	r3, [r2, #0]
			break;
 800085a:	e002      	b.n	8000862 <get_solve+0x142>
		return;
 800085c:	bf00      	nop
 800085e:	e000      	b.n	8000862 <get_solve+0x142>
			return;
 8000860:	bf00      	nop
	}




}
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000868:	20000068 	.word	0x20000068
 800086c:	200000ac 	.word	0x200000ac
 8000870:	459c4000 	.word	0x459c4000
 8000874:	200000b8 	.word	0x200000b8
 8000878:	200000b0 	.word	0x200000b0
 800087c:	200000bc 	.word	0x200000bc
 8000880:	200000b4 	.word	0x200000b4

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_MspInit+0x50>)
 8000898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <HAL_MspInit+0x50>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6613      	str	r3, [r2, #96]	; 0x60
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <HAL_MspInit+0x50>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_MspInit+0x50>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <HAL_MspInit+0x50>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_MspInit+0x50>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2005      	movs	r0, #5
 80008cc:	f000 fba7 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80008d0:	2005      	movs	r0, #5
 80008d2:	f000 fbc0 	bl	8001056 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <NMI_Handler+0x4>

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 fa7a 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800094c:	4802      	ldr	r0, [pc, #8]	; (8000958 <DMA1_Channel1_IRQHandler+0x10>)
 800094e:	f000 fd7b 	bl	8001448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000019c 	.word	0x2000019c

0800095c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000962:	f002 fe0d 	bl	8003580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000c0 	.word	0x200000c0

08000970 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000976:	f002 fe03 	bl	8003580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000c0 	.word	0x200000c0

08000984 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800098a:	f002 fdf9 	bl	8003580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000c0 	.word	0x200000c0

08000998 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <TIM1_CC_IRQHandler+0x10>)
 800099e:	f002 fdef 	bl	8003580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000c0 	.word	0x200000c0

080009ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE) == SET)
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <USART2_IRQHandler+0x68>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	2b10      	cmp	r3, #16
 80009bc:	d124      	bne.n	8000a08 <USART2_IRQHandler+0x5c>
	{
		__HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_IDLE);
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <USART2_IRQHandler+0x68>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2210      	movs	r2, #16
 80009c4:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart2);
 80009c6:	4813      	ldr	r0, [pc, #76]	; (8000a14 <USART2_IRQHandler+0x68>)
 80009c8:	f003 fa6a 	bl	8003ea0 <HAL_UART_DMAStop>
		data_len = Rx_Size - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <USART2_IRQHandler+0x6c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <USART2_IRQHandler+0x70>)
 80009dc:	701a      	strb	r2, [r3, #0]
		get_solve(&rx_buff);
 80009de:	4810      	ldr	r0, [pc, #64]	; (8000a20 <USART2_IRQHandler+0x74>)
 80009e0:	f7ff fe9e 	bl	8000720 <get_solve>
		memset(rx_buff, 0, Rx_Size);
 80009e4:	2240      	movs	r2, #64	; 0x40
 80009e6:	2100      	movs	r1, #0
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <USART2_IRQHandler+0x74>)
 80009ea:	f004 feaf 	bl	800574c <memset>
		HAL_UART_Receive_DMA(&huart2, rx_buff, Rx_Size);
 80009ee:	2240      	movs	r2, #64	; 0x40
 80009f0:	490b      	ldr	r1, [pc, #44]	; (8000a20 <USART2_IRQHandler+0x74>)
 80009f2:	4808      	ldr	r0, [pc, #32]	; (8000a14 <USART2_IRQHandler+0x68>)
 80009f4:	f003 f9fe 	bl	8003df4 <HAL_UART_Receive_DMA>
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <USART2_IRQHandler+0x68>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <USART2_IRQHandler+0x68>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f042 0210 	orr.w	r2, r2, #16
 8000a06:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <USART2_IRQHandler+0x68>)
 8000a0a:	f003 fadd 	bl	8003fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000010c 	.word	0x2000010c
 8000a18:	2000019c 	.word	0x2000019c
 8000a1c:	200000a8 	.word	0x200000a8
 8000a20:	20000028 	.word	0x20000028

08000a24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <SystemInit+0x20>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <SystemInit+0x20>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <MX_TIM1_Init+0xa0>)
 8000a68:	4a20      	ldr	r2, [pc, #128]	; (8000aec <MX_TIM1_Init+0xa4>)
 8000a6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <MX_TIM1_Init+0xa0>)
 8000a6e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <MX_TIM1_Init+0xa0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000;
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_TIM1_Init+0xa0>)
 8000a7c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_TIM1_Init+0xa0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_TIM1_Init+0xa0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_TIM1_Init+0xa0>)
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a94:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <MX_TIM1_Init+0xa0>)
 8000a96:	f002 fcab 	bl	80033f0 <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000aa0:	f7ff fef0 	bl	8000884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_TIM1_Init+0xa0>)
 8000ab2:	f002 fe84 	bl	80037be <HAL_TIM_ConfigClockSource>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000abc:	f7ff fee2 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_TIM1_Init+0xa0>)
 8000ad2:	f003 f899 	bl	8003c08 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000adc:	f7ff fed2 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	3720      	adds	r7, #32
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200000c0 	.word	0x200000c0
 8000aec:	40012c00 	.word	0x40012c00

08000af0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <HAL_TIM_Base_MspInit+0x74>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d12b      	bne.n	8000b5a <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <HAL_TIM_Base_MspInit+0x78>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b06:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <HAL_TIM_Base_MspInit+0x78>)
 8000b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <HAL_TIM_Base_MspInit+0x78>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2018      	movs	r0, #24
 8000b20:	f000 fa7d 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000b24:	2018      	movs	r0, #24
 8000b26:	f000 fa96 	bl	8001056 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2019      	movs	r0, #25
 8000b30:	f000 fa75 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b34:	2019      	movs	r0, #25
 8000b36:	f000 fa8e 	bl	8001056 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	201a      	movs	r0, #26
 8000b40:	f000 fa6d 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000b44:	201a      	movs	r0, #26
 8000b46:	f000 fa86 	bl	8001056 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	201b      	movs	r0, #27
 8000b50:	f000 fa65 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b54:	201b      	movs	r0, #27
 8000b56:	f000 fa7e 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40012c00 	.word	0x40012c00
 8000b68:	40021000 	.word	0x40021000

08000b6c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b72:	4a23      	ldr	r2, [pc, #140]	; (8000c00 <MX_USART2_UART_Init+0x94>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb4:	4811      	ldr	r0, [pc, #68]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000bb6:	f003 f8cd 	bl	8003d54 <HAL_UART_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bc0:	f7ff fe60 	bl	8000884 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000bc8:	f004 fcd2 	bl	8005570 <HAL_UARTEx_SetTxFifoThreshold>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bd2:	f7ff fe57 	bl	8000884 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4808      	ldr	r0, [pc, #32]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000bda:	f004 fd07 	bl	80055ec <HAL_UARTEx_SetRxFifoThreshold>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000be4:	f7ff fe4e 	bl	8000884 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000bea:	f004 fc88 	bl	80054fe <HAL_UARTEx_DisableFifoMode>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bf4:	f7ff fe46 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	2000010c 	.word	0x2000010c
 8000c00:	40004400 	.word	0x40004400

08000c04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b0ae      	sub	sp, #184	; 0xb8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	2294      	movs	r2, #148	; 0x94
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f004 fd91 	bl	800574c <memset>
  if(uartHandle->Instance==USART2)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a3a      	ldr	r2, [pc, #232]	; (8000d18 <HAL_UART_MspInit+0x114>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d16c      	bne.n	8000d0e <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4618      	mov	r0, r3
 8000c42:	f001 febd 	bl	80029c0 <HAL_RCCEx_PeriphCLKConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c4c:	f7ff fe1a 	bl	8000884 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c50:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <HAL_UART_MspInit+0x118>)
 8000c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c54:	4a31      	ldr	r2, [pc, #196]	; (8000d1c <HAL_UART_MspInit+0x118>)
 8000c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5c:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <HAL_UART_MspInit+0x118>)
 8000c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c68:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <HAL_UART_MspInit+0x118>)
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6c:	4a2b      	ldr	r2, [pc, #172]	; (8000d1c <HAL_UART_MspInit+0x118>)
 8000c6e:	f043 0308 	orr.w	r3, r3, #8
 8000c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c74:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <HAL_UART_MspInit+0x118>)
 8000c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c78:	f003 0308 	and.w	r3, r3, #8
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c80:	2360      	movs	r3, #96	; 0x60
 8000c82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c98:	2307      	movs	r3, #7
 8000c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	481e      	ldr	r0, [pc, #120]	; (8000d20 <HAL_UART_MspInit+0x11c>)
 8000ca6:	f000 fd2b 	bl	8001700 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000caa:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <HAL_UART_MspInit+0x120>)
 8000cac:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <HAL_UART_MspInit+0x124>)
 8000cae:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <HAL_UART_MspInit+0x120>)
 8000cb2:	221a      	movs	r2, #26
 8000cb4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <HAL_UART_MspInit+0x120>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cbc:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <HAL_UART_MspInit+0x120>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_UART_MspInit+0x120>)
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <HAL_UART_MspInit+0x120>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_UART_MspInit+0x120>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <HAL_UART_MspInit+0x120>)
 8000cd6:	2220      	movs	r2, #32
 8000cd8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_UART_MspInit+0x120>)
 8000cdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ce0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ce2:	4810      	ldr	r0, [pc, #64]	; (8000d24 <HAL_UART_MspInit+0x120>)
 8000ce4:	f000 f9d2 	bl	800108c <HAL_DMA_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8000cee:	f7ff fdc9 	bl	8000884 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <HAL_UART_MspInit+0x120>)
 8000cf6:	67da      	str	r2, [r3, #124]	; 0x7c
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_UART_MspInit+0x120>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2026      	movs	r0, #38	; 0x26
 8000d04:	f000 f98b 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d08:	2026      	movs	r0, #38	; 0x26
 8000d0a:	f000 f9a4 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d0e:	bf00      	nop
 8000d10:	37b8      	adds	r7, #184	; 0xb8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40004400 	.word	0x40004400
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	48000c00 	.word	0x48000c00
 8000d24:	2000019c 	.word	0x2000019c
 8000d28:	40020008 	.word	0x40020008

08000d2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d30:	f7ff fe78 	bl	8000a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <LoopForever+0xe>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	; (8000d78 <LoopForever+0x16>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f004 fcd3 	bl	8005704 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d5e:	f7ff fc51 	bl	8000604 <main>

08000d62 <LoopForever>:

LoopForever:
    b LoopForever
 8000d62:	e7fe      	b.n	8000d62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d64:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d70:	080059cc 	.word	0x080059cc
  ldr r2, =_sbss
 8000d74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d78:	20000200 	.word	0x20000200

08000d7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC1_IRQHandler>

08000d7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f93d 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f000 f80e 	bl	8000db0 <HAL_InitTick>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d002      	beq.n	8000da0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	71fb      	strb	r3, [r7, #7]
 8000d9e:	e001      	b.n	8000da4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000da0:	f7ff fd76 	bl	8000890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da4:	79fb      	ldrb	r3, [r7, #7]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <HAL_InitTick+0x6c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d023      	beq.n	8000e0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_InitTick+0x70>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_InitTick+0x6c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f949 	bl	8001072 <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10f      	bne.n	8000e06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d809      	bhi.n	8000e00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 f913 	bl	800101e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df8:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_InitTick+0x74>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e007      	b.n	8000e10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e004      	b.n	8000e10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
 8000e0a:	e001      	b.n	8000e10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	200001fc 	.word	0x200001fc

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	200001fc 	.word	0x200001fc

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff3e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff8e 	bl	8000f5c <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff31 	bl	8000ecc <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa2 	bl	8000fc4 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e08d      	b.n	80011ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <HAL_DMA_Init+0x138>)
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d80f      	bhi.n	80010ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <HAL_DMA_Init+0x13c>)
 80010b2:	4413      	add	r3, r2
 80010b4:	4a45      	ldr	r2, [pc, #276]	; (80011cc <HAL_DMA_Init+0x140>)
 80010b6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ba:	091b      	lsrs	r3, r3, #4
 80010bc:	009a      	lsls	r2, r3, #2
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a42      	ldr	r2, [pc, #264]	; (80011d0 <HAL_DMA_Init+0x144>)
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40
 80010c8:	e00e      	b.n	80010e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b40      	ldr	r3, [pc, #256]	; (80011d4 <HAL_DMA_Init+0x148>)
 80010d2:	4413      	add	r3, r2
 80010d4:	4a3d      	ldr	r2, [pc, #244]	; (80011cc <HAL_DMA_Init+0x140>)
 80010d6:	fba2 2303 	umull	r2, r3, r2, r3
 80010da:	091b      	lsrs	r3, r3, #4
 80010dc:	009a      	lsls	r2, r3, #2
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a3c      	ldr	r2, [pc, #240]	; (80011d8 <HAL_DMA_Init+0x14c>)
 80010e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2202      	movs	r2, #2
 80010ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80010fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001102:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800110c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001118:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001124:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 fa7e 	bl	800163c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001148:	d102      	bne.n	8001150 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001164:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d010      	beq.n	8001190 <HAL_DMA_Init+0x104>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b04      	cmp	r3, #4
 8001174:	d80c      	bhi.n	8001190 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 fa9e 	bl	80016b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	e008      	b.n	80011a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40020407 	.word	0x40020407
 80011c8:	bffdfff8 	.word	0xbffdfff8
 80011cc:	cccccccd 	.word	0xcccccccd
 80011d0:	40020000 	.word	0x40020000
 80011d4:	bffdfbf8 	.word	0xbffdfbf8
 80011d8:	40020400 	.word	0x40020400

080011dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <HAL_DMA_Start_IT+0x20>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e066      	b.n	80012ca <HAL_DMA_Start_IT+0xee>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b01      	cmp	r3, #1
 800120e:	d155      	bne.n	80012bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2202      	movs	r2, #2
 8001214:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0201 	bic.w	r2, r2, #1
 800122c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	68b9      	ldr	r1, [r7, #8]
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f000 f9c2 	bl	80015be <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	2b00      	cmp	r3, #0
 8001240:	d008      	beq.n	8001254 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f042 020e 	orr.w	r2, r2, #14
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	e00f      	b.n	8001274 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0204 	bic.w	r2, r2, #4
 8001262:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 020a 	orr.w	r2, r2, #10
 8001272:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800128c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001290:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001296:	2b00      	cmp	r3, #0
 8001298:	d007      	beq.n	80012aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012a8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f042 0201 	orr.w	r2, r2, #1
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	e005      	b.n	80012c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80012c4:	2302      	movs	r3, #2
 80012c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b085      	sub	sp, #20
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d008      	beq.n	80012fc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2204      	movs	r2, #4
 80012ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e040      	b.n	800137e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 020e 	bic.w	r2, r2, #14
 800130a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001316:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800131a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001330:	f003 021c 	and.w	r2, r3, #28
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	2101      	movs	r1, #1
 800133a:	fa01 f202 	lsl.w	r2, r1, r2
 800133e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001348:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00c      	beq.n	800136c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001360:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800136a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b084      	sub	sp, #16
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d005      	beq.n	80013ae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2204      	movs	r2, #4
 80013a6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e047      	b.n	800143e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 020e 	bic.w	r2, r2, #14
 80013bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0201 	bic.w	r2, r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f003 021c 	and.w	r2, r3, #28
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	2101      	movs	r1, #1
 80013ec:	fa01 f202 	lsl.w	r2, r1, r2
 80013f0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013fa:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00c      	beq.n	800141e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001412:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800141c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	4798      	blx	r3
    }
  }
  return status;
 800143e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001464:	f003 031c 	and.w	r3, r3, #28
 8001468:	2204      	movs	r2, #4
 800146a:	409a      	lsls	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4013      	ands	r3, r2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d026      	beq.n	80014c2 <HAL_DMA_IRQHandler+0x7a>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d021      	beq.n	80014c2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	2b00      	cmp	r3, #0
 800148a:	d107      	bne.n	800149c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0204 	bic.w	r2, r2, #4
 800149a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	f003 021c 	and.w	r2, r3, #28
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	2104      	movs	r1, #4
 80014aa:	fa01 f202 	lsl.w	r2, r1, r2
 80014ae:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d071      	beq.n	800159c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80014c0:	e06c      	b.n	800159c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f003 031c 	and.w	r3, r3, #28
 80014ca:	2202      	movs	r2, #2
 80014cc:	409a      	lsls	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d02e      	beq.n	8001534 <HAL_DMA_IRQHandler+0xec>
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d029      	beq.n	8001534 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0320 	and.w	r3, r3, #32
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10b      	bne.n	8001506 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 020a 	bic.w	r2, r2, #10
 80014fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f003 021c 	and.w	r2, r3, #28
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	2102      	movs	r1, #2
 8001514:	fa01 f202 	lsl.w	r2, r1, r2
 8001518:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001526:	2b00      	cmp	r3, #0
 8001528:	d038      	beq.n	800159c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001532:	e033      	b.n	800159c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	f003 031c 	and.w	r3, r3, #28
 800153c:	2208      	movs	r2, #8
 800153e:	409a      	lsls	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d02a      	beq.n	800159e <HAL_DMA_IRQHandler+0x156>
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d025      	beq.n	800159e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 020e 	bic.w	r2, r2, #14
 8001560:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f003 021c 	and.w	r2, r3, #28
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	2101      	movs	r1, #1
 8001570:	fa01 f202 	lsl.w	r2, r1, r2
 8001574:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800159c:	bf00      	nop
 800159e:	bf00      	nop
}
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015be:	b480      	push	{r7}
 80015c0:	b085      	sub	sp, #20
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015d4:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d004      	beq.n	80015e8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015e6:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	f003 021c 	and.w	r2, r3, #28
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	2101      	movs	r1, #1
 80015f6:	fa01 f202 	lsl.w	r2, r1, r2
 80015fa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b10      	cmp	r3, #16
 800160a:	d108      	bne.n	800161e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800161c:	e007      	b.n	800162e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	60da      	str	r2, [r3, #12]
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800164c:	429a      	cmp	r2, r3
 800164e:	d80a      	bhi.n	8001666 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800165c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6493      	str	r3, [r2, #72]	; 0x48
 8001664:	e007      	b.n	8001676 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	009a      	lsls	r2, r3, #2
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001670:	4413      	add	r3, r2
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	3b08      	subs	r3, #8
 800167e:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001680:	fba2 2303 	umull	r2, r3, r2, r3
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800168c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f003 031f 	and.w	r3, r3, #31
 8001694:	2201      	movs	r2, #1
 8001696:	409a      	lsls	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	40020407 	.word	0x40020407
 80016ac:	4002081c 	.word	0x4002081c
 80016b0:	cccccccd 	.word	0xcccccccd
 80016b4:	40020880 	.word	0x40020880

080016b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	461a      	mov	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a08      	ldr	r2, [pc, #32]	; (80016fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80016da:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3b01      	subs	r3, #1
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2201      	movs	r2, #1
 80016e6:	409a      	lsls	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	1000823f 	.word	0x1000823f
 80016fc:	40020940 	.word	0x40020940

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170e:	e166      	b.n	80019de <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2101      	movs	r1, #1
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	4013      	ands	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8158 	beq.w	80019d8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d005      	beq.n	8001740 <HAL_GPIO_Init+0x40>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d130      	bne.n	80017a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001776:	2201      	movs	r2, #1
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4013      	ands	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	f003 0201 	and.w	r2, r3, #1
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d017      	beq.n	80017de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	2203      	movs	r2, #3
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d123      	bne.n	8001832 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	08da      	lsrs	r2, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3208      	adds	r2, #8
 80017f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	220f      	movs	r2, #15
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	691a      	ldr	r2, [r3, #16]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	08da      	lsrs	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3208      	adds	r2, #8
 800182c:	6939      	ldr	r1, [r7, #16]
 800182e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2203      	movs	r2, #3
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 0203 	and.w	r2, r3, #3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80b2 	beq.w	80019d8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <HAL_GPIO_Init+0x2fc>)
 8001876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001878:	4a60      	ldr	r2, [pc, #384]	; (80019fc <HAL_GPIO_Init+0x2fc>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6613      	str	r3, [r2, #96]	; 0x60
 8001880:	4b5e      	ldr	r3, [pc, #376]	; (80019fc <HAL_GPIO_Init+0x2fc>)
 8001882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800188c:	4a5c      	ldr	r2, [pc, #368]	; (8001a00 <HAL_GPIO_Init+0x300>)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	220f      	movs	r2, #15
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018b6:	d02b      	beq.n	8001910 <HAL_GPIO_Init+0x210>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a52      	ldr	r2, [pc, #328]	; (8001a04 <HAL_GPIO_Init+0x304>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d025      	beq.n	800190c <HAL_GPIO_Init+0x20c>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a51      	ldr	r2, [pc, #324]	; (8001a08 <HAL_GPIO_Init+0x308>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d01f      	beq.n	8001908 <HAL_GPIO_Init+0x208>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a50      	ldr	r2, [pc, #320]	; (8001a0c <HAL_GPIO_Init+0x30c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d019      	beq.n	8001904 <HAL_GPIO_Init+0x204>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a4f      	ldr	r2, [pc, #316]	; (8001a10 <HAL_GPIO_Init+0x310>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d013      	beq.n	8001900 <HAL_GPIO_Init+0x200>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a4e      	ldr	r2, [pc, #312]	; (8001a14 <HAL_GPIO_Init+0x314>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d00d      	beq.n	80018fc <HAL_GPIO_Init+0x1fc>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a4d      	ldr	r2, [pc, #308]	; (8001a18 <HAL_GPIO_Init+0x318>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d007      	beq.n	80018f8 <HAL_GPIO_Init+0x1f8>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a4c      	ldr	r2, [pc, #304]	; (8001a1c <HAL_GPIO_Init+0x31c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d101      	bne.n	80018f4 <HAL_GPIO_Init+0x1f4>
 80018f0:	2307      	movs	r3, #7
 80018f2:	e00e      	b.n	8001912 <HAL_GPIO_Init+0x212>
 80018f4:	2308      	movs	r3, #8
 80018f6:	e00c      	b.n	8001912 <HAL_GPIO_Init+0x212>
 80018f8:	2306      	movs	r3, #6
 80018fa:	e00a      	b.n	8001912 <HAL_GPIO_Init+0x212>
 80018fc:	2305      	movs	r3, #5
 80018fe:	e008      	b.n	8001912 <HAL_GPIO_Init+0x212>
 8001900:	2304      	movs	r3, #4
 8001902:	e006      	b.n	8001912 <HAL_GPIO_Init+0x212>
 8001904:	2303      	movs	r3, #3
 8001906:	e004      	b.n	8001912 <HAL_GPIO_Init+0x212>
 8001908:	2302      	movs	r3, #2
 800190a:	e002      	b.n	8001912 <HAL_GPIO_Init+0x212>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_GPIO_Init+0x212>
 8001910:	2300      	movs	r3, #0
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	f002 0203 	and.w	r2, r2, #3
 8001918:	0092      	lsls	r2, r2, #2
 800191a:	4093      	lsls	r3, r2
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001922:	4937      	ldr	r1, [pc, #220]	; (8001a00 <HAL_GPIO_Init+0x300>)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001930:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_GPIO_Init+0x320>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001954:	4a32      	ldr	r2, [pc, #200]	; (8001a20 <HAL_GPIO_Init+0x320>)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800195a:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <HAL_GPIO_Init+0x320>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800197e:	4a28      	ldr	r2, [pc, #160]	; (8001a20 <HAL_GPIO_Init+0x320>)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <HAL_GPIO_Init+0x320>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019a8:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <HAL_GPIO_Init+0x320>)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <HAL_GPIO_Init+0x320>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019d2:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <HAL_GPIO_Init+0x320>)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	3301      	adds	r3, #1
 80019dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f47f ae91 	bne.w	8001710 <HAL_GPIO_Init+0x10>
  }
}
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010000 	.word	0x40010000
 8001a04:	48000400 	.word	0x48000400
 8001a08:	48000800 	.word	0x48000800
 8001a0c:	48000c00 	.word	0x48000c00
 8001a10:	48001000 	.word	0x48001000
 8001a14:	48001400 	.word	0x48001400
 8001a18:	48001800 	.word	0x48001800
 8001a1c:	48001c00 	.word	0x48001c00
 8001a20:	40010400 	.word	0x40010400

08001a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a34:	787b      	ldrb	r3, [r7, #1]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a3a:	887a      	ldrh	r2, [r7, #2]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a42:	887a      	ldrh	r2, [r7, #2]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	041a      	lsls	r2, r3, #16
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	43d9      	mvns	r1, r3
 8001a72:	887b      	ldrh	r3, [r7, #2]
 8001a74:	400b      	ands	r3, r1
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	619a      	str	r2, [r3, #24]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a98:	d102      	bne.n	8001aa0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a9e:	e00b      	b.n	8001ab8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aae:	d102      	bne.n	8001ab6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab4:	e000      	b.n	8001ab8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001ab6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40007000 	.word	0x40007000

08001ac8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d141      	bne.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ad6:	4b4b      	ldr	r3, [pc, #300]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae2:	d131      	bne.n	8001b48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ae4:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aea:	4a46      	ldr	r2, [pc, #280]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001af0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af4:	4b43      	ldr	r3, [pc, #268]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001afc:	4a41      	ldr	r2, [pc, #260]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b04:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2232      	movs	r2, #50	; 0x32
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	4a3f      	ldr	r2, [pc, #252]	; (8001c0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b10:	fba2 2303 	umull	r2, r3, r2, r3
 8001b14:	0c9b      	lsrs	r3, r3, #18
 8001b16:	3301      	adds	r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b1a:	e002      	b.n	8001b22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b22:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2e:	d102      	bne.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f2      	bne.n	8001b1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b36:	4b33      	ldr	r3, [pc, #204]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b42:	d158      	bne.n	8001bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e057      	b.n	8001bf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b48:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b4e:	4a2d      	ldr	r2, [pc, #180]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b58:	e04d      	b.n	8001bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b60:	d141      	bne.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b62:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6e:	d131      	bne.n	8001bd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b76:	4a23      	ldr	r2, [pc, #140]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b80:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b88:	4a1e      	ldr	r2, [pc, #120]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2232      	movs	r2, #50	; 0x32
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	0c9b      	lsrs	r3, r3, #18
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba6:	e002      	b.n	8001bae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bba:	d102      	bne.n	8001bc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f2      	bne.n	8001ba8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bce:	d112      	bne.n	8001bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e011      	b.n	8001bf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001be4:	e007      	b.n	8001bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bf4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	40007000 	.word	0x40007000
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	431bde83 	.word	0x431bde83

08001c10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d102      	bne.n	8001c24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f000 bc08 	b.w	8002434 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c24:	4b96      	ldr	r3, [pc, #600]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 030c 	and.w	r3, r3, #12
 8001c2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c2e:	4b94      	ldr	r3, [pc, #592]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80e4 	beq.w	8001e0e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d007      	beq.n	8001c5c <HAL_RCC_OscConfig+0x4c>
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b0c      	cmp	r3, #12
 8001c50:	f040 808b 	bne.w	8001d6a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	f040 8087 	bne.w	8001d6a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c5c:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_OscConfig+0x64>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e3df      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1a      	ldr	r2, [r3, #32]
 8001c78:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d004      	beq.n	8001c8e <HAL_RCC_OscConfig+0x7e>
 8001c84:	4b7e      	ldr	r3, [pc, #504]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c8c:	e005      	b.n	8001c9a <HAL_RCC_OscConfig+0x8a>
 8001c8e:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d223      	bcs.n	8001ce6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 fdcc 	bl	8002840 <RCC_SetFlashLatencyFromMSIRange>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e3c0      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb2:	4b73      	ldr	r3, [pc, #460]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a72      	ldr	r2, [pc, #456]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b70      	ldr	r3, [pc, #448]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	496d      	ldr	r1, [pc, #436]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cd0:	4b6b      	ldr	r3, [pc, #428]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	4968      	ldr	r1, [pc, #416]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
 8001ce4:	e025      	b.n	8001d32 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce6:	4b66      	ldr	r3, [pc, #408]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a65      	ldr	r2, [pc, #404]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001cec:	f043 0308 	orr.w	r3, r3, #8
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b63      	ldr	r3, [pc, #396]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4960      	ldr	r1, [pc, #384]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d04:	4b5e      	ldr	r3, [pc, #376]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	495b      	ldr	r1, [pc, #364]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fd8c 	bl	8002840 <RCC_SetFlashLatencyFromMSIRange>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e380      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d32:	f000 fcc1 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8001d36:	4602      	mov	r2, r0
 8001d38:	4b51      	ldr	r3, [pc, #324]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	4950      	ldr	r1, [pc, #320]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001d44:	5ccb      	ldrb	r3, [r1, r3]
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	4a4e      	ldr	r2, [pc, #312]	; (8001e88 <HAL_RCC_OscConfig+0x278>)
 8001d50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d52:	4b4e      	ldr	r3, [pc, #312]	; (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f82a 	bl	8000db0 <HAL_InitTick>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d052      	beq.n	8001e0c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	e364      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d032      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d72:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a42      	ldr	r2, [pc, #264]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d7e:	f7ff f867 	bl	8000e50 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d86:	f7ff f863 	bl	8000e50 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e34d      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d98:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001da4:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a35      	ldr	r2, [pc, #212]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001daa:	f043 0308 	orr.w	r3, r3, #8
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	4b33      	ldr	r3, [pc, #204]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4930      	ldr	r1, [pc, #192]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dc2:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	492b      	ldr	r1, [pc, #172]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
 8001dd6:	e01a      	b.n	8001e0e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dd8:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a28      	ldr	r2, [pc, #160]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001de4:	f7ff f834 	bl	8000e50 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dec:	f7ff f830 	bl	8000e50 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e31a      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x1dc>
 8001e0a:	e000      	b.n	8001e0e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d073      	beq.n	8001f02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_OscConfig+0x21c>
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2b0c      	cmp	r3, #12
 8001e24:	d10e      	bne.n	8001e44 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d10b      	bne.n	8001e44 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d063      	beq.n	8001f00 <HAL_RCC_OscConfig+0x2f0>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d15f      	bne.n	8001f00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e2f7      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4c:	d106      	bne.n	8001e5c <HAL_RCC_OscConfig+0x24c>
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e025      	b.n	8001ea8 <HAL_RCC_OscConfig+0x298>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e64:	d114      	bne.n	8001e90 <HAL_RCC_OscConfig+0x280>
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a02      	ldr	r2, [pc, #8]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e013      	b.n	8001ea8 <HAL_RCC_OscConfig+0x298>
 8001e80:	40021000 	.word	0x40021000
 8001e84:	0800592c 	.word	0x0800592c
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20000004 	.word	0x20000004
 8001e90:	4ba0      	ldr	r3, [pc, #640]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a9f      	ldr	r2, [pc, #636]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b9d      	ldr	r3, [pc, #628]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a9c      	ldr	r2, [pc, #624]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d013      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7fe ffce 	bl	8000e50 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7fe ffca 	bl	8000e50 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e2b4      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eca:	4b92      	ldr	r3, [pc, #584]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x2a8>
 8001ed6:	e014      	b.n	8001f02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7fe ffba 	bl	8000e50 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7fe ffb6 	bl	8000e50 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e2a0      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ef2:	4b88      	ldr	r3, [pc, #544]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x2d0>
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d060      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_OscConfig+0x310>
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b0c      	cmp	r3, #12
 8001f18:	d119      	bne.n	8001f4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d116      	bne.n	8001f4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f20:	4b7c      	ldr	r3, [pc, #496]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_OscConfig+0x328>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e27d      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f38:	4b76      	ldr	r3, [pc, #472]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	4973      	ldr	r1, [pc, #460]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f4c:	e040      	b.n	8001fd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d023      	beq.n	8001f9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f56:	4b6f      	ldr	r3, [pc, #444]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a6e      	ldr	r2, [pc, #440]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f62:	f7fe ff75 	bl	8000e50 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6a:	f7fe ff71 	bl	8000e50 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e25b      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f7c:	4b65      	ldr	r3, [pc, #404]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f88:	4b62      	ldr	r3, [pc, #392]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	061b      	lsls	r3, r3, #24
 8001f96:	495f      	ldr	r1, [pc, #380]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
 8001f9c:	e018      	b.n	8001fd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9e:	4b5d      	ldr	r3, [pc, #372]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a5c      	ldr	r2, [pc, #368]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001faa:	f7fe ff51 	bl	8000e50 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb2:	f7fe ff4d 	bl	8000e50 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e237      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fc4:	4b53      	ldr	r3, [pc, #332]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f0      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d03c      	beq.n	8002056 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01c      	beq.n	800201e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe4:	4b4b      	ldr	r3, [pc, #300]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fea:	4a4a      	ldr	r2, [pc, #296]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff4:	f7fe ff2c 	bl	8000e50 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ffc:	f7fe ff28 	bl	8000e50 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e212      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800200e:	4b41      	ldr	r3, [pc, #260]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8002010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0ef      	beq.n	8001ffc <HAL_RCC_OscConfig+0x3ec>
 800201c:	e01b      	b.n	8002056 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201e:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8002020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002024:	4a3b      	ldr	r2, [pc, #236]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8002026:	f023 0301 	bic.w	r3, r3, #1
 800202a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202e:	f7fe ff0f 	bl	8000e50 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002036:	f7fe ff0b 	bl	8000e50 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e1f5      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002048:	4b32      	ldr	r3, [pc, #200]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 800204a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1ef      	bne.n	8002036 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 80a6 	beq.w	80021b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002064:	2300      	movs	r3, #0
 8002066:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002068:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10d      	bne.n	8002090 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002074:	4b27      	ldr	r3, [pc, #156]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	4a26      	ldr	r2, [pc, #152]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 800207a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207e:	6593      	str	r3, [r2, #88]	; 0x58
 8002080:	4b24      	ldr	r3, [pc, #144]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208c:	2301      	movs	r3, #1
 800208e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002090:	4b21      	ldr	r3, [pc, #132]	; (8002118 <HAL_RCC_OscConfig+0x508>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d118      	bne.n	80020ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_RCC_OscConfig+0x508>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1d      	ldr	r2, [pc, #116]	; (8002118 <HAL_RCC_OscConfig+0x508>)
 80020a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a8:	f7fe fed2 	bl	8000e50 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b0:	f7fe fece 	bl	8000e50 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e1b8      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <HAL_RCC_OscConfig+0x508>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d108      	bne.n	80020e8 <HAL_RCC_OscConfig+0x4d8>
 80020d6:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020e6:	e029      	b.n	800213c <HAL_RCC_OscConfig+0x52c>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b05      	cmp	r3, #5
 80020ee:	d115      	bne.n	800211c <HAL_RCC_OscConfig+0x50c>
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f6:	4a07      	ldr	r2, [pc, #28]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	4a03      	ldr	r2, [pc, #12]	; (8002114 <HAL_RCC_OscConfig+0x504>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002110:	e014      	b.n	800213c <HAL_RCC_OscConfig+0x52c>
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	40007000 	.word	0x40007000
 800211c:	4b9d      	ldr	r3, [pc, #628]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	4a9c      	ldr	r2, [pc, #624]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800212c:	4b99      	ldr	r3, [pc, #612]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002132:	4a98      	ldr	r2, [pc, #608]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d016      	beq.n	8002172 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002144:	f7fe fe84 	bl	8000e50 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800214a:	e00a      	b.n	8002162 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214c:	f7fe fe80 	bl	8000e50 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	; 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e168      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002162:	4b8c      	ldr	r3, [pc, #560]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ed      	beq.n	800214c <HAL_RCC_OscConfig+0x53c>
 8002170:	e015      	b.n	800219e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002172:	f7fe fe6d 	bl	8000e50 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7fe fe69 	bl	8000e50 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	; 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e151      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002190:	4b80      	ldr	r3, [pc, #512]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1ed      	bne.n	800217a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800219e:	7ffb      	ldrb	r3, [r7, #31]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d105      	bne.n	80021b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a4:	4b7b      	ldr	r3, [pc, #492]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a8:	4a7a      	ldr	r2, [pc, #488]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 80021aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d03c      	beq.n	8002236 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01c      	beq.n	80021fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021c4:	4b73      	ldr	r3, [pc, #460]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 80021c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ca:	4a72      	ldr	r2, [pc, #456]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7fe fe3c 	bl	8000e50 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021dc:	f7fe fe38 	bl	8000e50 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e122      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021ee:	4b69      	ldr	r3, [pc, #420]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 80021f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0ef      	beq.n	80021dc <HAL_RCC_OscConfig+0x5cc>
 80021fc:	e01b      	b.n	8002236 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021fe:	4b65      	ldr	r3, [pc, #404]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 8002200:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002204:	4a63      	ldr	r2, [pc, #396]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220e:	f7fe fe1f 	bl	8000e50 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002216:	f7fe fe1b 	bl	8000e50 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e105      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002228:	4b5a      	ldr	r3, [pc, #360]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 800222a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1ef      	bne.n	8002216 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80f9 	beq.w	8002432 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	2b02      	cmp	r3, #2
 8002246:	f040 80cf 	bne.w	80023e8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800224a:	4b52      	ldr	r3, [pc, #328]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 0203 	and.w	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	429a      	cmp	r2, r3
 800225c:	d12c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	3b01      	subs	r3, #1
 800226a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d123      	bne.n	80022b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d11b      	bne.n	80022b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d113      	bne.n	80022b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	085b      	lsrs	r3, r3, #1
 800229c:	3b01      	subs	r3, #1
 800229e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d109      	bne.n	80022b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	085b      	lsrs	r3, r3, #1
 80022b0:	3b01      	subs	r3, #1
 80022b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d071      	beq.n	800239c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	d068      	beq.n	8002390 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022be:	4b35      	ldr	r3, [pc, #212]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d105      	bne.n	80022d6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022ca:	4b32      	ldr	r3, [pc, #200]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0ac      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022da:	4b2e      	ldr	r3, [pc, #184]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a2d      	ldr	r2, [pc, #180]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 80022e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022e6:	f7fe fdb3 	bl	8000e50 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ee:	f7fe fdaf 	bl	8000e50 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e099      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002300:	4b24      	ldr	r3, [pc, #144]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f0      	bne.n	80022ee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230c:	4b21      	ldr	r3, [pc, #132]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	4b21      	ldr	r3, [pc, #132]	; (8002398 <HAL_RCC_OscConfig+0x788>)
 8002312:	4013      	ands	r3, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800231c:	3a01      	subs	r2, #1
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	4311      	orrs	r1, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002326:	0212      	lsls	r2, r2, #8
 8002328:	4311      	orrs	r1, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800232e:	0852      	lsrs	r2, r2, #1
 8002330:	3a01      	subs	r2, #1
 8002332:	0552      	lsls	r2, r2, #21
 8002334:	4311      	orrs	r1, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800233a:	0852      	lsrs	r2, r2, #1
 800233c:	3a01      	subs	r2, #1
 800233e:	0652      	lsls	r2, r2, #25
 8002340:	4311      	orrs	r1, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002346:	06d2      	lsls	r2, r2, #27
 8002348:	430a      	orrs	r2, r1
 800234a:	4912      	ldr	r1, [pc, #72]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 800234c:	4313      	orrs	r3, r2
 800234e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002350:	4b10      	ldr	r3, [pc, #64]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0f      	ldr	r2, [pc, #60]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 8002356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a0c      	ldr	r2, [pc, #48]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 8002362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002366:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002368:	f7fe fd72 	bl	8000e50 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe fd6e 	bl	8000e50 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e058      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <HAL_RCC_OscConfig+0x784>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800238e:	e050      	b.n	8002432 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e04f      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
 8002394:	40021000 	.word	0x40021000
 8002398:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCC_OscConfig+0x82c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d144      	bne.n	8002432 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023a8:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_RCC_OscConfig+0x82c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a23      	ldr	r2, [pc, #140]	; (800243c <HAL_RCC_OscConfig+0x82c>)
 80023ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b4:	4b21      	ldr	r3, [pc, #132]	; (800243c <HAL_RCC_OscConfig+0x82c>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a20      	ldr	r2, [pc, #128]	; (800243c <HAL_RCC_OscConfig+0x82c>)
 80023ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023c0:	f7fe fd46 	bl	8000e50 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe fd42 	bl	8000e50 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e02c      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023da:	4b18      	ldr	r3, [pc, #96]	; (800243c <HAL_RCC_OscConfig+0x82c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x7b8>
 80023e6:	e024      	b.n	8002432 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	2b0c      	cmp	r3, #12
 80023ec:	d01f      	beq.n	800242e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b13      	ldr	r3, [pc, #76]	; (800243c <HAL_RCC_OscConfig+0x82c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a12      	ldr	r2, [pc, #72]	; (800243c <HAL_RCC_OscConfig+0x82c>)
 80023f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7fe fd29 	bl	8000e50 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002402:	f7fe fd25 	bl	8000e50 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e00f      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_OscConfig+0x82c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_RCC_OscConfig+0x82c>)
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	4905      	ldr	r1, [pc, #20]	; (800243c <HAL_RCC_OscConfig+0x82c>)
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_RCC_OscConfig+0x830>)
 8002428:	4013      	ands	r3, r2
 800242a:	60cb      	str	r3, [r1, #12]
 800242c:	e001      	b.n	8002432 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	feeefffc 	.word	0xfeeefffc

08002444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e11d      	b.n	8002698 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800245c:	4b90      	ldr	r3, [pc, #576]	; (80026a0 <HAL_RCC_ClockConfig+0x25c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d910      	bls.n	800248c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b8d      	ldr	r3, [pc, #564]	; (80026a0 <HAL_RCC_ClockConfig+0x25c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 020f 	bic.w	r2, r3, #15
 8002472:	498b      	ldr	r1, [pc, #556]	; (80026a0 <HAL_RCC_ClockConfig+0x25c>)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b89      	ldr	r3, [pc, #548]	; (80026a0 <HAL_RCC_ClockConfig+0x25c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e105      	b.n	8002698 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d010      	beq.n	80024ba <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	4b81      	ldr	r3, [pc, #516]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d908      	bls.n	80024ba <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a8:	4b7e      	ldr	r3, [pc, #504]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	497b      	ldr	r1, [pc, #492]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d079      	beq.n	80025ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d11e      	bne.n	800250c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ce:	4b75      	ldr	r3, [pc, #468]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0dc      	b.n	8002698 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80024de:	f000 fa09 	bl	80028f4 <RCC_GetSysClockFreqFromPLLSource>
 80024e2:	4603      	mov	r3, r0
 80024e4:	4a70      	ldr	r2, [pc, #448]	; (80026a8 <HAL_RCC_ClockConfig+0x264>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d946      	bls.n	8002578 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80024ea:	4b6e      	ldr	r3, [pc, #440]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d140      	bne.n	8002578 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024f6:	4b6b      	ldr	r3, [pc, #428]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024fe:	4a69      	ldr	r2, [pc, #420]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 8002500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002504:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e035      	b.n	8002578 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d107      	bne.n	8002524 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002514:	4b63      	ldr	r3, [pc, #396]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d115      	bne.n	800254c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0b9      	b.n	8002698 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d107      	bne.n	800253c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800252c:	4b5d      	ldr	r3, [pc, #372]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d109      	bne.n	800254c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0ad      	b.n	8002698 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800253c:	4b59      	ldr	r3, [pc, #356]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0a5      	b.n	8002698 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800254c:	f000 f8b4 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8002550:	4603      	mov	r3, r0
 8002552:	4a55      	ldr	r2, [pc, #340]	; (80026a8 <HAL_RCC_ClockConfig+0x264>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d90f      	bls.n	8002578 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002558:	4b52      	ldr	r3, [pc, #328]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d109      	bne.n	8002578 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002564:	4b4f      	ldr	r3, [pc, #316]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800256c:	4a4d      	ldr	r2, [pc, #308]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 800256e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002572:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002578:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f023 0203 	bic.w	r2, r3, #3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4947      	ldr	r1, [pc, #284]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800258a:	f7fe fc61 	bl	8000e50 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002592:	f7fe fc5d 	bl	8000e50 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e077      	b.n	8002698 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a8:	4b3e      	ldr	r3, [pc, #248]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 020c 	and.w	r2, r3, #12
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d1eb      	bne.n	8002592 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2b80      	cmp	r3, #128	; 0x80
 80025be:	d105      	bne.n	80025cc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025c0:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	4a37      	ldr	r2, [pc, #220]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 80025c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025ca:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d010      	beq.n	80025fa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	4b31      	ldr	r3, [pc, #196]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d208      	bcs.n	80025fa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e8:	4b2e      	ldr	r3, [pc, #184]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	492b      	ldr	r1, [pc, #172]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025fa:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <HAL_RCC_ClockConfig+0x25c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d210      	bcs.n	800262a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002608:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <HAL_RCC_ClockConfig+0x25c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 020f 	bic.w	r2, r3, #15
 8002610:	4923      	ldr	r1, [pc, #140]	; (80026a0 <HAL_RCC_ClockConfig+0x25c>)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	4313      	orrs	r3, r2
 8002616:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002618:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <HAL_RCC_ClockConfig+0x25c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d001      	beq.n	800262a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e036      	b.n	8002698 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002636:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	4918      	ldr	r1, [pc, #96]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 8002644:	4313      	orrs	r3, r2
 8002646:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d009      	beq.n	8002668 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4910      	ldr	r1, [pc, #64]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 8002664:	4313      	orrs	r3, r2
 8002666:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002668:	f000 f826 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 800266c:	4602      	mov	r2, r0
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_RCC_ClockConfig+0x260>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	490c      	ldr	r1, [pc, #48]	; (80026ac <HAL_RCC_ClockConfig+0x268>)
 800267a:	5ccb      	ldrb	r3, [r1, r3]
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <HAL_RCC_ClockConfig+0x26c>)
 8002686:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_RCC_ClockConfig+0x270>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe fb8f 	bl	8000db0 <HAL_InitTick>
 8002692:	4603      	mov	r3, r0
 8002694:	73fb      	strb	r3, [r7, #15]

  return status;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40022000 	.word	0x40022000
 80026a4:	40021000 	.word	0x40021000
 80026a8:	04c4b400 	.word	0x04c4b400
 80026ac:	0800592c 	.word	0x0800592c
 80026b0:	20000000 	.word	0x20000000
 80026b4:	20000004 	.word	0x20000004

080026b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b089      	sub	sp, #36	; 0x24
 80026bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	2300      	movs	r3, #0
 80026c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c6:	4b3e      	ldr	r3, [pc, #248]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026d0:	4b3b      	ldr	r3, [pc, #236]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x34>
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	2b0c      	cmp	r3, #12
 80026e4:	d121      	bne.n	800272a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d11e      	bne.n	800272a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026ec:	4b34      	ldr	r3, [pc, #208]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026f8:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026fe:	0a1b      	lsrs	r3, r3, #8
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	e005      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002708:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002714:	4a2b      	ldr	r2, [pc, #172]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10d      	bne.n	8002740 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	2b04      	cmp	r3, #4
 800272e:	d102      	bne.n	8002736 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002730:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	e004      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	2b08      	cmp	r3, #8
 800273a:	d101      	bne.n	8002740 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800273c:	4b23      	ldr	r3, [pc, #140]	; (80027cc <HAL_RCC_GetSysClockFreq+0x114>)
 800273e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d134      	bne.n	80027b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002746:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d003      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0xa6>
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d003      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0xac>
 800275c:	e005      	b.n	800276a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002760:	617b      	str	r3, [r7, #20]
      break;
 8002762:	e005      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCC_GetSysClockFreq+0x114>)
 8002766:	617b      	str	r3, [r7, #20]
      break;
 8002768:	e002      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	617b      	str	r3, [r7, #20]
      break;
 800276e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3301      	adds	r3, #1
 800277c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	fb03 f202 	mul.w	r2, r3, r2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	fbb2 f3f3 	udiv	r3, r2, r3
 8002794:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	0e5b      	lsrs	r3, r3, #25
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	3301      	adds	r3, #1
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027b0:	69bb      	ldr	r3, [r7, #24]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
 80027c4:	08005944 	.word	0x08005944
 80027c8:	00f42400 	.word	0x00f42400
 80027cc:	007a1200 	.word	0x007a1200

080027d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000000 	.word	0x20000000

080027e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027ec:	f7ff fff0 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	4904      	ldr	r1, [pc, #16]	; (8002810 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000
 8002810:	0800593c 	.word	0x0800593c

08002814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002818:	f7ff ffda 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	0adb      	lsrs	r3, r3, #11
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4904      	ldr	r1, [pc, #16]	; (800283c <HAL_RCC_GetPCLK2Freq+0x28>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000
 800283c:	0800593c 	.word	0x0800593c

08002840 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002848:	2300      	movs	r3, #0
 800284a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002858:	f7ff f916 	bl	8001a88 <HAL_PWREx_GetVoltageRange>
 800285c:	6178      	str	r0, [r7, #20]
 800285e:	e014      	b.n	800288a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002860:	4b22      	ldr	r3, [pc, #136]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	4a21      	ldr	r2, [pc, #132]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286a:	6593      	str	r3, [r2, #88]	; 0x58
 800286c:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800286e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002878:	f7ff f906 	bl	8001a88 <HAL_PWREx_GetVoltageRange>
 800287c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800287e:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	4a1a      	ldr	r2, [pc, #104]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002888:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002890:	d10b      	bne.n	80028aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b80      	cmp	r3, #128	; 0x80
 8002896:	d913      	bls.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2ba0      	cmp	r3, #160	; 0xa0
 800289c:	d902      	bls.n	80028a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800289e:	2302      	movs	r3, #2
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	e00d      	b.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028a4:	2301      	movs	r3, #1
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	e00a      	b.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b7f      	cmp	r3, #127	; 0x7f
 80028ae:	d902      	bls.n	80028b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80028b0:	2302      	movs	r3, #2
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	e004      	b.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b70      	cmp	r3, #112	; 0x70
 80028ba:	d101      	bne.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028bc:	2301      	movs	r3, #1
 80028be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f023 020f 	bic.w	r2, r3, #15
 80028c8:	4909      	ldr	r1, [pc, #36]	; (80028f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028d0:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d001      	beq.n	80028e2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40022000 	.word	0x40022000

080028f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028fa:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d00b      	beq.n	8002922 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d825      	bhi.n	800295c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d008      	beq.n	8002928 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d11f      	bne.n	800295c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800291c:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800291e:	613b      	str	r3, [r7, #16]
    break;
 8002920:	e01f      	b.n	8002962 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002922:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002924:	613b      	str	r3, [r7, #16]
    break;
 8002926:	e01c      	b.n	8002962 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002928:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d107      	bne.n	8002944 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002934:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	e005      	b.n	8002950 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002944:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002950:	4a1a      	ldr	r2, [pc, #104]	; (80029bc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002958:	613b      	str	r3, [r7, #16]
    break;
 800295a:	e002      	b.n	8002962 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
    break;
 8002960:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002962:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	091b      	lsrs	r3, r3, #4
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	3301      	adds	r3, #1
 800296e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002970:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	fb03 f202 	mul.w	r2, r3, r2
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	0e5b      	lsrs	r3, r3, #25
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	3301      	adds	r3, #1
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80029a2:	683b      	ldr	r3, [r7, #0]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	40021000 	.word	0x40021000
 80029b4:	00f42400 	.word	0x00f42400
 80029b8:	007a1200 	.word	0x007a1200
 80029bc:	08005944 	.word	0x08005944

080029c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029c8:	2300      	movs	r3, #0
 80029ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029cc:	2300      	movs	r3, #0
 80029ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d040      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e0:	2b80      	cmp	r3, #128	; 0x80
 80029e2:	d02a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029e4:	2b80      	cmp	r3, #128	; 0x80
 80029e6:	d825      	bhi.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029e8:	2b60      	cmp	r3, #96	; 0x60
 80029ea:	d026      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029ec:	2b60      	cmp	r3, #96	; 0x60
 80029ee:	d821      	bhi.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029f0:	2b40      	cmp	r3, #64	; 0x40
 80029f2:	d006      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80029f4:	2b40      	cmp	r3, #64	; 0x40
 80029f6:	d81d      	bhi.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d009      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d010      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002a00:	e018      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a02:	4b89      	ldr	r3, [pc, #548]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	4a88      	ldr	r2, [pc, #544]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a0e:	e015      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3304      	adds	r3, #4
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fb02 	bl	8003020 <RCCEx_PLLSAI1_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a20:	e00c      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3320      	adds	r3, #32
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 fbed 	bl	8003208 <RCCEx_PLLSAI2_Config>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a32:	e003      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	74fb      	strb	r3, [r7, #19]
      break;
 8002a38:	e000      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10b      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a42:	4b79      	ldr	r3, [pc, #484]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a48:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a50:	4975      	ldr	r1, [pc, #468]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002a58:	e001      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a5a:	7cfb      	ldrb	r3, [r7, #19]
 8002a5c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d047      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a72:	d030      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a78:	d82a      	bhi.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a7e:	d02a      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a84:	d824      	bhi.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a8a:	d008      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a90:	d81e      	bhi.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9a:	d010      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a9c:	e018      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a9e:	4b62      	ldr	r3, [pc, #392]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	4a61      	ldr	r2, [pc, #388]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002aaa:	e015      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fab4 	bl	8003020 <RCCEx_PLLSAI1_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002abc:	e00c      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3320      	adds	r3, #32
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fb9f 	bl	8003208 <RCCEx_PLLSAI2_Config>
 8002aca:	4603      	mov	r3, r0
 8002acc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ace:	e003      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	74fb      	strb	r3, [r7, #19]
      break;
 8002ad4:	e000      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002ad6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ad8:	7cfb      	ldrb	r3, [r7, #19]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ade:	4b52      	ldr	r3, [pc, #328]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ae0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	494e      	ldr	r1, [pc, #312]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002af4:	e001      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af6:	7cfb      	ldrb	r3, [r7, #19]
 8002af8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 809f 	beq.w	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b0c:	4b46      	ldr	r3, [pc, #280]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00d      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b41      	ldr	r3, [pc, #260]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b26:	4a40      	ldr	r2, [pc, #256]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b2e:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b3e:	4b3b      	ldr	r3, [pc, #236]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a3a      	ldr	r2, [pc, #232]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b4a:	f7fe f981 	bl	8000e50 <HAL_GetTick>
 8002b4e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b50:	e009      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b52:	f7fe f97d 	bl	8000e50 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d902      	bls.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	74fb      	strb	r3, [r7, #19]
        break;
 8002b64:	e005      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b66:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0ef      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002b72:	7cfb      	ldrb	r3, [r7, #19]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d15b      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b82:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01f      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d019      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b96:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ba2:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba8:	4a1f      	ldr	r2, [pc, #124]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb2:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb8:	4a1b      	ldr	r2, [pc, #108]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bc2:	4a19      	ldr	r2, [pc, #100]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d016      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fe f93c 	bl	8000e50 <HAL_GetTick>
 8002bd8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bda:	e00b      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bdc:	f7fe f938 	bl	8000e50 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d902      	bls.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	74fb      	strb	r3, [r7, #19]
            break;
 8002bf2:	e006      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0ec      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10c      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c08:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c18:	4903      	ldr	r1, [pc, #12]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c20:	e008      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c22:	7cfb      	ldrb	r3, [r7, #19]
 8002c24:	74bb      	strb	r3, [r7, #18]
 8002c26:	e005      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c30:	7cfb      	ldrb	r3, [r7, #19]
 8002c32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c34:	7c7b      	ldrb	r3, [r7, #17]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d105      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3a:	4ba0      	ldr	r3, [pc, #640]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	4a9f      	ldr	r2, [pc, #636]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c52:	4b9a      	ldr	r3, [pc, #616]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c58:	f023 0203 	bic.w	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c60:	4996      	ldr	r1, [pc, #600]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c74:	4b91      	ldr	r3, [pc, #580]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7a:	f023 020c 	bic.w	r2, r3, #12
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	498e      	ldr	r1, [pc, #568]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c96:	4b89      	ldr	r3, [pc, #548]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	4985      	ldr	r1, [pc, #532]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cb8:	4b80      	ldr	r3, [pc, #512]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc6:	497d      	ldr	r1, [pc, #500]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cda:	4b78      	ldr	r3, [pc, #480]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce8:	4974      	ldr	r1, [pc, #464]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cfc:	4b6f      	ldr	r3, [pc, #444]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0a:	496c      	ldr	r1, [pc, #432]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d1e:	4b67      	ldr	r3, [pc, #412]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d2c:	4963      	ldr	r1, [pc, #396]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d40:	4b5e      	ldr	r3, [pc, #376]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d4e:	495b      	ldr	r1, [pc, #364]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d62:	4b56      	ldr	r3, [pc, #344]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d70:	4952      	ldr	r1, [pc, #328]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d84:	4b4d      	ldr	r3, [pc, #308]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	494a      	ldr	r1, [pc, #296]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002da6:	4b45      	ldr	r3, [pc, #276]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db4:	4941      	ldr	r1, [pc, #260]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dc8:	4b3c      	ldr	r3, [pc, #240]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dce:	f023 0203 	bic.w	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd6:	4939      	ldr	r1, [pc, #228]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d028      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dea:	4b34      	ldr	r3, [pc, #208]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df8:	4930      	ldr	r1, [pc, #192]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e08:	d106      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e0a:	4b2c      	ldr	r3, [pc, #176]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	4a2b      	ldr	r2, [pc, #172]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e14:	60d3      	str	r3, [r2, #12]
 8002e16:	e011      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3304      	adds	r3, #4
 8002e26:	2101      	movs	r1, #1
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 f8f9 	bl	8003020 <RCCEx_PLLSAI1_Config>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e32:	7cfb      	ldrb	r3, [r7, #19]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d04d      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e50:	d108      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002e52:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e58:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e5e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e62:	e012      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002e64:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e6a:	4a14      	ldr	r2, [pc, #80]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e70:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e82:	490e      	ldr	r1, [pc, #56]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e92:	d106      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e9e:	60d3      	str	r3, [r2, #12]
 8002ea0:	e020      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eaa:	d109      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a02      	ldr	r2, [pc, #8]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb6:	60d3      	str	r3, [r2, #12]
 8002eb8:	e014      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ec4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	2101      	movs	r1, #1
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 f8a5 	bl	8003020 <RCCEx_PLLSAI1_Config>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eda:	7cfb      	ldrb	r3, [r7, #19]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002ee0:	7cfb      	ldrb	r3, [r7, #19]
 8002ee2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d028      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ef0:	4b4a      	ldr	r3, [pc, #296]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002efe:	4947      	ldr	r1, [pc, #284]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f10:	4b42      	ldr	r3, [pc, #264]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4a41      	ldr	r2, [pc, #260]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f1a:	60d3      	str	r3, [r2, #12]
 8002f1c:	e011      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f26:	d10c      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 f876 	bl	8003020 <RCCEx_PLLSAI1_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002f3e:	7cfb      	ldrb	r3, [r7, #19]
 8002f40:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01e      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f4e:	4b33      	ldr	r3, [pc, #204]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5e:	492f      	ldr	r1, [pc, #188]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3304      	adds	r3, #4
 8002f76:	2102      	movs	r1, #2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 f851 	bl	8003020 <RCCEx_PLLSAI1_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f82:	7cfb      	ldrb	r3, [r7, #19]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00b      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f98:	4b20      	ldr	r3, [pc, #128]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f9e:	f023 0204 	bic.w	r2, r3, #4
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa8:	491c      	ldr	r1, [pc, #112]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00b      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fbc:	4b17      	ldr	r3, [pc, #92]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fc2:	f023 0218 	bic.w	r2, r3, #24
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	4913      	ldr	r1, [pc, #76]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d017      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fe6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff0:	490a      	ldr	r1, [pc, #40]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ffe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003002:	d105      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a04      	ldr	r2, [pc, #16]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800300a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800300e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003010:	7cbb      	ldrb	r3, [r7, #18]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000

08003020 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800302e:	4b72      	ldr	r3, [pc, #456]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00e      	beq.n	8003058 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800303a:	4b6f      	ldr	r3, [pc, #444]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0203 	and.w	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d103      	bne.n	8003052 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
       ||
 800304e:	2b00      	cmp	r3, #0
 8003050:	d142      	bne.n	80030d8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
 8003056:	e03f      	b.n	80030d8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b03      	cmp	r3, #3
 800305e:	d018      	beq.n	8003092 <RCCEx_PLLSAI1_Config+0x72>
 8003060:	2b03      	cmp	r3, #3
 8003062:	d825      	bhi.n	80030b0 <RCCEx_PLLSAI1_Config+0x90>
 8003064:	2b01      	cmp	r3, #1
 8003066:	d002      	beq.n	800306e <RCCEx_PLLSAI1_Config+0x4e>
 8003068:	2b02      	cmp	r3, #2
 800306a:	d009      	beq.n	8003080 <RCCEx_PLLSAI1_Config+0x60>
 800306c:	e020      	b.n	80030b0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800306e:	4b62      	ldr	r3, [pc, #392]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d11d      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800307e:	e01a      	b.n	80030b6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003080:	4b5d      	ldr	r3, [pc, #372]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d116      	bne.n	80030ba <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003090:	e013      	b.n	80030ba <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003092:	4b59      	ldr	r3, [pc, #356]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10f      	bne.n	80030be <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800309e:	4b56      	ldr	r3, [pc, #344]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030ae:	e006      	b.n	80030be <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
      break;
 80030b4:	e004      	b.n	80030c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80030b6:	bf00      	nop
 80030b8:	e002      	b.n	80030c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80030ba:	bf00      	nop
 80030bc:	e000      	b.n	80030c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80030be:	bf00      	nop
    }

    if(status == HAL_OK)
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d108      	bne.n	80030d8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80030c6:	4b4c      	ldr	r3, [pc, #304]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f023 0203 	bic.w	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4949      	ldr	r1, [pc, #292]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f040 8086 	bne.w	80031ec <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030e0:	4b45      	ldr	r3, [pc, #276]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a44      	ldr	r2, [pc, #272]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ec:	f7fd feb0 	bl	8000e50 <HAL_GetTick>
 80030f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030f2:	e009      	b.n	8003108 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030f4:	f7fd feac 	bl	8000e50 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d902      	bls.n	8003108 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	73fb      	strb	r3, [r7, #15]
        break;
 8003106:	e005      	b.n	8003114 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003108:	4b3b      	ldr	r3, [pc, #236]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1ef      	bne.n	80030f4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d168      	bne.n	80031ec <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d113      	bne.n	8003148 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003120:	4b35      	ldr	r3, [pc, #212]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	4b35      	ldr	r3, [pc, #212]	; (80031fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003126:	4013      	ands	r3, r2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6892      	ldr	r2, [r2, #8]
 800312c:	0211      	lsls	r1, r2, #8
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68d2      	ldr	r2, [r2, #12]
 8003132:	06d2      	lsls	r2, r2, #27
 8003134:	4311      	orrs	r1, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6852      	ldr	r2, [r2, #4]
 800313a:	3a01      	subs	r2, #1
 800313c:	0112      	lsls	r2, r2, #4
 800313e:	430a      	orrs	r2, r1
 8003140:	492d      	ldr	r1, [pc, #180]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003142:	4313      	orrs	r3, r2
 8003144:	610b      	str	r3, [r1, #16]
 8003146:	e02d      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d115      	bne.n	800317a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800314e:	4b2a      	ldr	r3, [pc, #168]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003154:	4013      	ands	r3, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6892      	ldr	r2, [r2, #8]
 800315a:	0211      	lsls	r1, r2, #8
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6912      	ldr	r2, [r2, #16]
 8003160:	0852      	lsrs	r2, r2, #1
 8003162:	3a01      	subs	r2, #1
 8003164:	0552      	lsls	r2, r2, #21
 8003166:	4311      	orrs	r1, r2
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6852      	ldr	r2, [r2, #4]
 800316c:	3a01      	subs	r2, #1
 800316e:	0112      	lsls	r2, r2, #4
 8003170:	430a      	orrs	r2, r1
 8003172:	4921      	ldr	r1, [pc, #132]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003174:	4313      	orrs	r3, r2
 8003176:	610b      	str	r3, [r1, #16]
 8003178:	e014      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800317a:	4b1f      	ldr	r3, [pc, #124]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	4b21      	ldr	r3, [pc, #132]	; (8003204 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003180:	4013      	ands	r3, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6892      	ldr	r2, [r2, #8]
 8003186:	0211      	lsls	r1, r2, #8
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6952      	ldr	r2, [r2, #20]
 800318c:	0852      	lsrs	r2, r2, #1
 800318e:	3a01      	subs	r2, #1
 8003190:	0652      	lsls	r2, r2, #25
 8003192:	4311      	orrs	r1, r2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6852      	ldr	r2, [r2, #4]
 8003198:	3a01      	subs	r2, #1
 800319a:	0112      	lsls	r2, r2, #4
 800319c:	430a      	orrs	r2, r1
 800319e:	4916      	ldr	r1, [pc, #88]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031a4:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7fd fe4e 	bl	8000e50 <HAL_GetTick>
 80031b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031b6:	e009      	b.n	80031cc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031b8:	f7fd fe4a 	bl	8000e50 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d902      	bls.n	80031cc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	73fb      	strb	r3, [r7, #15]
          break;
 80031ca:	e005      	b.n	80031d8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ef      	beq.n	80031b8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	4904      	ldr	r1, [pc, #16]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000
 80031fc:	07ff800f 	.word	0x07ff800f
 8003200:	ff9f800f 	.word	0xff9f800f
 8003204:	f9ff800f 	.word	0xf9ff800f

08003208 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003216:	4b72      	ldr	r3, [pc, #456]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00e      	beq.n	8003240 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003222:	4b6f      	ldr	r3, [pc, #444]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0203 	and.w	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d103      	bne.n	800323a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
       ||
 8003236:	2b00      	cmp	r3, #0
 8003238:	d142      	bne.n	80032c0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	73fb      	strb	r3, [r7, #15]
 800323e:	e03f      	b.n	80032c0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b03      	cmp	r3, #3
 8003246:	d018      	beq.n	800327a <RCCEx_PLLSAI2_Config+0x72>
 8003248:	2b03      	cmp	r3, #3
 800324a:	d825      	bhi.n	8003298 <RCCEx_PLLSAI2_Config+0x90>
 800324c:	2b01      	cmp	r3, #1
 800324e:	d002      	beq.n	8003256 <RCCEx_PLLSAI2_Config+0x4e>
 8003250:	2b02      	cmp	r3, #2
 8003252:	d009      	beq.n	8003268 <RCCEx_PLLSAI2_Config+0x60>
 8003254:	e020      	b.n	8003298 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003256:	4b62      	ldr	r3, [pc, #392]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d11d      	bne.n	800329e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003266:	e01a      	b.n	800329e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003268:	4b5d      	ldr	r3, [pc, #372]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003270:	2b00      	cmp	r3, #0
 8003272:	d116      	bne.n	80032a2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003278:	e013      	b.n	80032a2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800327a:	4b59      	ldr	r3, [pc, #356]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10f      	bne.n	80032a6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003286:	4b56      	ldr	r3, [pc, #344]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003296:	e006      	b.n	80032a6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      break;
 800329c:	e004      	b.n	80032a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800329e:	bf00      	nop
 80032a0:	e002      	b.n	80032a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80032a2:	bf00      	nop
 80032a4:	e000      	b.n	80032a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80032a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d108      	bne.n	80032c0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80032ae:	4b4c      	ldr	r3, [pc, #304]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f023 0203 	bic.w	r2, r3, #3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4949      	ldr	r1, [pc, #292]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f040 8086 	bne.w	80033d4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032c8:	4b45      	ldr	r3, [pc, #276]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a44      	ldr	r2, [pc, #272]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d4:	f7fd fdbc 	bl	8000e50 <HAL_GetTick>
 80032d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032da:	e009      	b.n	80032f0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032dc:	f7fd fdb8 	bl	8000e50 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d902      	bls.n	80032f0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	73fb      	strb	r3, [r7, #15]
        break;
 80032ee:	e005      	b.n	80032fc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032f0:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ef      	bne.n	80032dc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d168      	bne.n	80033d4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d113      	bne.n	8003330 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003308:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	4b35      	ldr	r3, [pc, #212]	; (80033e4 <RCCEx_PLLSAI2_Config+0x1dc>)
 800330e:	4013      	ands	r3, r2
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6892      	ldr	r2, [r2, #8]
 8003314:	0211      	lsls	r1, r2, #8
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68d2      	ldr	r2, [r2, #12]
 800331a:	06d2      	lsls	r2, r2, #27
 800331c:	4311      	orrs	r1, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6852      	ldr	r2, [r2, #4]
 8003322:	3a01      	subs	r2, #1
 8003324:	0112      	lsls	r2, r2, #4
 8003326:	430a      	orrs	r2, r1
 8003328:	492d      	ldr	r1, [pc, #180]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800332a:	4313      	orrs	r3, r2
 800332c:	614b      	str	r3, [r1, #20]
 800332e:	e02d      	b.n	800338c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d115      	bne.n	8003362 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003336:	4b2a      	ldr	r3, [pc, #168]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	4b2b      	ldr	r3, [pc, #172]	; (80033e8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800333c:	4013      	ands	r3, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6892      	ldr	r2, [r2, #8]
 8003342:	0211      	lsls	r1, r2, #8
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6912      	ldr	r2, [r2, #16]
 8003348:	0852      	lsrs	r2, r2, #1
 800334a:	3a01      	subs	r2, #1
 800334c:	0552      	lsls	r2, r2, #21
 800334e:	4311      	orrs	r1, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6852      	ldr	r2, [r2, #4]
 8003354:	3a01      	subs	r2, #1
 8003356:	0112      	lsls	r2, r2, #4
 8003358:	430a      	orrs	r2, r1
 800335a:	4921      	ldr	r1, [pc, #132]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800335c:	4313      	orrs	r3, r2
 800335e:	614b      	str	r3, [r1, #20]
 8003360:	e014      	b.n	800338c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003362:	4b1f      	ldr	r3, [pc, #124]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	4b21      	ldr	r3, [pc, #132]	; (80033ec <RCCEx_PLLSAI2_Config+0x1e4>)
 8003368:	4013      	ands	r3, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6892      	ldr	r2, [r2, #8]
 800336e:	0211      	lsls	r1, r2, #8
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6952      	ldr	r2, [r2, #20]
 8003374:	0852      	lsrs	r2, r2, #1
 8003376:	3a01      	subs	r2, #1
 8003378:	0652      	lsls	r2, r2, #25
 800337a:	4311      	orrs	r1, r2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6852      	ldr	r2, [r2, #4]
 8003380:	3a01      	subs	r2, #1
 8003382:	0112      	lsls	r2, r2, #4
 8003384:	430a      	orrs	r2, r1
 8003386:	4916      	ldr	r1, [pc, #88]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003388:	4313      	orrs	r3, r2
 800338a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800338c:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003396:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003398:	f7fd fd5a 	bl	8000e50 <HAL_GetTick>
 800339c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800339e:	e009      	b.n	80033b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033a0:	f7fd fd56 	bl	8000e50 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d902      	bls.n	80033b4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	73fb      	strb	r3, [r7, #15]
          break;
 80033b2:	e005      	b.n	80033c0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033b4:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0ef      	beq.n	80033a0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	4904      	ldr	r1, [pc, #16]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000
 80033e4:	07ff800f 	.word	0x07ff800f
 80033e8:	ff9f800f 	.word	0xff9f800f
 80033ec:	f9ff800f 	.word	0xf9ff800f

080033f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e049      	b.n	8003496 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd fb6a 	bl	8000af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3304      	adds	r3, #4
 800342c:	4619      	mov	r1, r3
 800342e:	4610      	mov	r0, r2
 8003430:	f000 fab6 	bl	80039a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d001      	beq.n	80034b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e04f      	b.n	8003558 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a23      	ldr	r2, [pc, #140]	; (8003564 <HAL_TIM_Base_Start_IT+0xc4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01d      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x76>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e2:	d018      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x76>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1f      	ldr	r2, [pc, #124]	; (8003568 <HAL_TIM_Base_Start_IT+0xc8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x76>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1e      	ldr	r2, [pc, #120]	; (800356c <HAL_TIM_Base_Start_IT+0xcc>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00e      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x76>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1c      	ldr	r2, [pc, #112]	; (8003570 <HAL_TIM_Base_Start_IT+0xd0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x76>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1b      	ldr	r2, [pc, #108]	; (8003574 <HAL_TIM_Base_Start_IT+0xd4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x76>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a19      	ldr	r2, [pc, #100]	; (8003578 <HAL_TIM_Base_Start_IT+0xd8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d115      	bne.n	8003542 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	4b17      	ldr	r3, [pc, #92]	; (800357c <HAL_TIM_Base_Start_IT+0xdc>)
 800351e:	4013      	ands	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b06      	cmp	r3, #6
 8003526:	d015      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0xb4>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352e:	d011      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003540:	e008      	b.n	8003554 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0201 	orr.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e000      	b.n	8003556 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003554:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	40012c00 	.word	0x40012c00
 8003568:	40000400 	.word	0x40000400
 800356c:	40000800 	.word	0x40000800
 8003570:	40000c00 	.word	0x40000c00
 8003574:	40013400 	.word	0x40013400
 8003578:	40014000 	.word	0x40014000
 800357c:	00010007 	.word	0x00010007

08003580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b02      	cmp	r3, #2
 8003594:	d122      	bne.n	80035dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d11b      	bne.n	80035dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0202 	mvn.w	r2, #2
 80035ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f9ce 	bl	8003964 <HAL_TIM_IC_CaptureCallback>
 80035c8:	e005      	b.n	80035d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f9c0 	bl	8003950 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f9d1 	bl	8003978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d122      	bne.n	8003630 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d11b      	bne.n	8003630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0204 	mvn.w	r2, #4
 8003600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2202      	movs	r2, #2
 8003606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f9a4 	bl	8003964 <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f996 	bl	8003950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f9a7 	bl	8003978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b08      	cmp	r3, #8
 800363c:	d122      	bne.n	8003684 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b08      	cmp	r3, #8
 800364a:	d11b      	bne.n	8003684 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0208 	mvn.w	r2, #8
 8003654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2204      	movs	r2, #4
 800365a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f97a 	bl	8003964 <HAL_TIM_IC_CaptureCallback>
 8003670:	e005      	b.n	800367e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f96c 	bl	8003950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f97d 	bl	8003978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b10      	cmp	r3, #16
 8003690:	d122      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b10      	cmp	r3, #16
 800369e:	d11b      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0210 	mvn.w	r2, #16
 80036a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2208      	movs	r2, #8
 80036ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f950 	bl	8003964 <HAL_TIM_IC_CaptureCallback>
 80036c4:	e005      	b.n	80036d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f942 	bl	8003950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f953 	bl	8003978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d10e      	bne.n	8003704 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d107      	bne.n	8003704 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0201 	mvn.w	r2, #1
 80036fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fc fff8 	bl	80006f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b80      	cmp	r3, #128	; 0x80
 8003710:	d10e      	bne.n	8003730 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371c:	2b80      	cmp	r3, #128	; 0x80
 800371e:	d107      	bne.n	8003730 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fafe 	bl	8003d2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800373e:	d10e      	bne.n	800375e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374a:	2b80      	cmp	r3, #128	; 0x80
 800374c:	d107      	bne.n	800375e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 faf1 	bl	8003d40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d10e      	bne.n	800378a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b40      	cmp	r3, #64	; 0x40
 8003778:	d107      	bne.n	800378a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f901 	bl	800398c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b20      	cmp	r3, #32
 8003796:	d10e      	bne.n	80037b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d107      	bne.n	80037b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f06f 0220 	mvn.w	r2, #32
 80037ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fab1 	bl	8003d18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_TIM_ConfigClockSource+0x1c>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e0b6      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x18a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2202      	movs	r2, #2
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003804:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003816:	d03e      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0xd8>
 8003818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381c:	f200 8087 	bhi.w	800392e <HAL_TIM_ConfigClockSource+0x170>
 8003820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003824:	f000 8086 	beq.w	8003934 <HAL_TIM_ConfigClockSource+0x176>
 8003828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382c:	d87f      	bhi.n	800392e <HAL_TIM_ConfigClockSource+0x170>
 800382e:	2b70      	cmp	r3, #112	; 0x70
 8003830:	d01a      	beq.n	8003868 <HAL_TIM_ConfigClockSource+0xaa>
 8003832:	2b70      	cmp	r3, #112	; 0x70
 8003834:	d87b      	bhi.n	800392e <HAL_TIM_ConfigClockSource+0x170>
 8003836:	2b60      	cmp	r3, #96	; 0x60
 8003838:	d050      	beq.n	80038dc <HAL_TIM_ConfigClockSource+0x11e>
 800383a:	2b60      	cmp	r3, #96	; 0x60
 800383c:	d877      	bhi.n	800392e <HAL_TIM_ConfigClockSource+0x170>
 800383e:	2b50      	cmp	r3, #80	; 0x50
 8003840:	d03c      	beq.n	80038bc <HAL_TIM_ConfigClockSource+0xfe>
 8003842:	2b50      	cmp	r3, #80	; 0x50
 8003844:	d873      	bhi.n	800392e <HAL_TIM_ConfigClockSource+0x170>
 8003846:	2b40      	cmp	r3, #64	; 0x40
 8003848:	d058      	beq.n	80038fc <HAL_TIM_ConfigClockSource+0x13e>
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d86f      	bhi.n	800392e <HAL_TIM_ConfigClockSource+0x170>
 800384e:	2b30      	cmp	r3, #48	; 0x30
 8003850:	d064      	beq.n	800391c <HAL_TIM_ConfigClockSource+0x15e>
 8003852:	2b30      	cmp	r3, #48	; 0x30
 8003854:	d86b      	bhi.n	800392e <HAL_TIM_ConfigClockSource+0x170>
 8003856:	2b20      	cmp	r3, #32
 8003858:	d060      	beq.n	800391c <HAL_TIM_ConfigClockSource+0x15e>
 800385a:	2b20      	cmp	r3, #32
 800385c:	d867      	bhi.n	800392e <HAL_TIM_ConfigClockSource+0x170>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d05c      	beq.n	800391c <HAL_TIM_ConfigClockSource+0x15e>
 8003862:	2b10      	cmp	r3, #16
 8003864:	d05a      	beq.n	800391c <HAL_TIM_ConfigClockSource+0x15e>
 8003866:	e062      	b.n	800392e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	6899      	ldr	r1, [r3, #8]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f000 f9a6 	bl	8003bc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800388a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	609a      	str	r2, [r3, #8]
      break;
 8003894:	e04f      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	6899      	ldr	r1, [r3, #8]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f000 f98f 	bl	8003bc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038b8:	609a      	str	r2, [r3, #8]
      break;
 80038ba:	e03c      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	461a      	mov	r2, r3
 80038ca:	f000 f903 	bl	8003ad4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2150      	movs	r1, #80	; 0x50
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 f95c 	bl	8003b92 <TIM_ITRx_SetConfig>
      break;
 80038da:	e02c      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	461a      	mov	r2, r3
 80038ea:	f000 f922 	bl	8003b32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2160      	movs	r1, #96	; 0x60
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 f94c 	bl	8003b92 <TIM_ITRx_SetConfig>
      break;
 80038fa:	e01c      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	461a      	mov	r2, r3
 800390a:	f000 f8e3 	bl	8003ad4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2140      	movs	r1, #64	; 0x40
 8003914:	4618      	mov	r0, r3
 8003916:	f000 f93c 	bl	8003b92 <TIM_ITRx_SetConfig>
      break;
 800391a:	e00c      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f000 f933 	bl	8003b92 <TIM_ITRx_SetConfig>
      break;
 800392c:	e003      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
      break;
 8003932:	e000      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003934:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003946:	7bfb      	ldrb	r3, [r7, #15]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a40      	ldr	r2, [pc, #256]	; (8003ab4 <TIM_Base_SetConfig+0x114>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d013      	beq.n	80039e0 <TIM_Base_SetConfig+0x40>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039be:	d00f      	beq.n	80039e0 <TIM_Base_SetConfig+0x40>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a3d      	ldr	r2, [pc, #244]	; (8003ab8 <TIM_Base_SetConfig+0x118>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00b      	beq.n	80039e0 <TIM_Base_SetConfig+0x40>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a3c      	ldr	r2, [pc, #240]	; (8003abc <TIM_Base_SetConfig+0x11c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d007      	beq.n	80039e0 <TIM_Base_SetConfig+0x40>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a3b      	ldr	r2, [pc, #236]	; (8003ac0 <TIM_Base_SetConfig+0x120>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d003      	beq.n	80039e0 <TIM_Base_SetConfig+0x40>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a3a      	ldr	r2, [pc, #232]	; (8003ac4 <TIM_Base_SetConfig+0x124>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d108      	bne.n	80039f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2f      	ldr	r2, [pc, #188]	; (8003ab4 <TIM_Base_SetConfig+0x114>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d01f      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a00:	d01b      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a2c      	ldr	r2, [pc, #176]	; (8003ab8 <TIM_Base_SetConfig+0x118>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d017      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a2b      	ldr	r2, [pc, #172]	; (8003abc <TIM_Base_SetConfig+0x11c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d013      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a2a      	ldr	r2, [pc, #168]	; (8003ac0 <TIM_Base_SetConfig+0x120>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00f      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a29      	ldr	r2, [pc, #164]	; (8003ac4 <TIM_Base_SetConfig+0x124>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00b      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a28      	ldr	r2, [pc, #160]	; (8003ac8 <TIM_Base_SetConfig+0x128>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d007      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a27      	ldr	r2, [pc, #156]	; (8003acc <TIM_Base_SetConfig+0x12c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d003      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a26      	ldr	r2, [pc, #152]	; (8003ad0 <TIM_Base_SetConfig+0x130>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d108      	bne.n	8003a4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a10      	ldr	r2, [pc, #64]	; (8003ab4 <TIM_Base_SetConfig+0x114>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00f      	beq.n	8003a98 <TIM_Base_SetConfig+0xf8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <TIM_Base_SetConfig+0x124>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00b      	beq.n	8003a98 <TIM_Base_SetConfig+0xf8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a11      	ldr	r2, [pc, #68]	; (8003ac8 <TIM_Base_SetConfig+0x128>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d007      	beq.n	8003a98 <TIM_Base_SetConfig+0xf8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a10      	ldr	r2, [pc, #64]	; (8003acc <TIM_Base_SetConfig+0x12c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <TIM_Base_SetConfig+0xf8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a0f      	ldr	r2, [pc, #60]	; (8003ad0 <TIM_Base_SetConfig+0x130>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d103      	bne.n	8003aa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	615a      	str	r2, [r3, #20]
}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40000800 	.word	0x40000800
 8003ac0:	40000c00 	.word	0x40000c00
 8003ac4:	40013400 	.word	0x40013400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800

08003ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	f023 0201 	bic.w	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f023 030a 	bic.w	r3, r3, #10
 8003b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b087      	sub	sp, #28
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	f023 0210 	bic.w	r2, r3, #16
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	031b      	lsls	r3, r3, #12
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	621a      	str	r2, [r3, #32]
}
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f043 0307 	orr.w	r3, r3, #7
 8003bb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	609a      	str	r2, [r3, #8]
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003be2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	021a      	lsls	r2, r3, #8
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	609a      	str	r2, [r3, #8]
}
 8003bfc:	bf00      	nop
 8003bfe:	371c      	adds	r7, #28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e068      	b.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a2e      	ldr	r2, [pc, #184]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d004      	beq.n	8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a2d      	ldr	r2, [pc, #180]	; (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d108      	bne.n	8003c66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1e      	ldr	r2, [pc, #120]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01d      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c92:	d018      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d013      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1a      	ldr	r2, [pc, #104]	; (8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a18      	ldr	r2, [pc, #96]	; (8003d10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d009      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a13      	ldr	r2, [pc, #76]	; (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d004      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a14      	ldr	r2, [pc, #80]	; (8003d14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ccc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40012c00 	.word	0x40012c00
 8003d04:	40013400 	.word	0x40013400
 8003d08:	40000400 	.word	0x40000400
 8003d0c:	40000800 	.word	0x40000800
 8003d10:	40000c00 	.word	0x40000c00
 8003d14:	40014000 	.word	0x40014000

08003d18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e042      	b.n	8003dec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d106      	bne.n	8003d7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7fc ff43 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2224      	movs	r2, #36	; 0x24
 8003d82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0201 	bic.w	r2, r2, #1
 8003d94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fc62 	bl	8004660 <UART_SetConfig>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e022      	b.n	8003dec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 ff52 	bl	8004c58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 ffd9 	bl	8004d9c <UART_CheckIdleState>
 8003dea:	4603      	mov	r3, r0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	; 0x28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d142      	bne.n	8003e92 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_UART_Receive_DMA+0x24>
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e03b      	b.n	8003e94 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_UART_Receive_DMA+0x36>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e034      	b.n	8003e94 <HAL_UART_Receive_DMA+0xa0>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <HAL_UART_Receive_DMA+0xa8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d01f      	beq.n	8003e82 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d018      	beq.n	8003e82 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	623b      	str	r3, [r7, #32]
 8003e70:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	69f9      	ldr	r1, [r7, #28]
 8003e74:	6a3a      	ldr	r2, [r7, #32]
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e6      	bne.n	8003e50 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003e82:	88fb      	ldrh	r3, [r7, #6]
 8003e84:	461a      	mov	r2, r3
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f001 f89b 	bl	8004fc4 <UART_Start_Receive_DMA>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	e000      	b.n	8003e94 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
  }
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3728      	adds	r7, #40	; 0x28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40008000 	.word	0x40008000

08003ea0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b090      	sub	sp, #64	; 0x40
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b80      	cmp	r3, #128	; 0x80
 8003ec4:	d139      	bne.n	8003f3a <HAL_UART_DMAStop+0x9a>
 8003ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec8:	2b21      	cmp	r3, #33	; 0x21
 8003eca:	d136      	bne.n	8003f3a <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	61fb      	str	r3, [r7, #28]
   return(result);
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3308      	adds	r3, #8
 8003eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e5      	bne.n	8003ecc <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d015      	beq.n	8003f34 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fd f9e0 	bl	80012d2 <HAL_DMA_Abort>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00d      	beq.n	8003f34 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fd fb42 	bl	80015a6 <HAL_DMA_GetError>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d105      	bne.n	8003f34 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2210      	movs	r2, #16
 8003f2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e044      	b.n	8003fbe <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f001 f8ed 	bl	8005114 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f44:	2b40      	cmp	r3, #64	; 0x40
 8003f46:	d139      	bne.n	8003fbc <HAL_UART_DMAStop+0x11c>
 8003f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4a:	2b22      	cmp	r3, #34	; 0x22
 8003f4c:	d136      	bne.n	8003fbc <HAL_UART_DMAStop+0x11c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3308      	adds	r3, #8
 8003f54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f64:	633b      	str	r3, [r7, #48]	; 0x30
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f6e:	61ba      	str	r2, [r7, #24]
 8003f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	6979      	ldr	r1, [r7, #20]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e5      	bne.n	8003f4e <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d015      	beq.n	8003fb6 <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fd f99f 	bl	80012d2 <HAL_DMA_Abort>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00d      	beq.n	8003fb6 <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fd fb01 	bl	80015a6 <HAL_DMA_GetError>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d105      	bne.n	8003fb6 <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2210      	movs	r2, #16
 8003fae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e003      	b.n	8003fbe <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f001 f8ed 	bl	8005196 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3740      	adds	r7, #64	; 0x40
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b0ba      	sub	sp, #232	; 0xe8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003ff2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003ffc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d11b      	bne.n	800403c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d015      	beq.n	800403c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d105      	bne.n	8004028 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800401c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d009      	beq.n	800403c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 82d6 	beq.w	80045de <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	4798      	blx	r3
      }
      return;
 800403a:	e2d0      	b.n	80045de <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800403c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 811f 	beq.w	8004284 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004046:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800404a:	4b8b      	ldr	r3, [pc, #556]	; (8004278 <HAL_UART_IRQHandler+0x2b0>)
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004052:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004056:	4b89      	ldr	r3, [pc, #548]	; (800427c <HAL_UART_IRQHandler+0x2b4>)
 8004058:	4013      	ands	r3, r2
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 8112 	beq.w	8004284 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d011      	beq.n	8004090 <HAL_UART_IRQHandler+0xc8>
 800406c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00b      	beq.n	8004090 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2201      	movs	r2, #1
 800407e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004086:	f043 0201 	orr.w	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d011      	beq.n	80040c0 <HAL_UART_IRQHandler+0xf8>
 800409c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00b      	beq.n	80040c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2202      	movs	r2, #2
 80040ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b6:	f043 0204 	orr.w	r2, r3, #4
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d011      	beq.n	80040f0 <HAL_UART_IRQHandler+0x128>
 80040cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00b      	beq.n	80040f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2204      	movs	r2, #4
 80040de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e6:	f043 0202 	orr.w	r2, r3, #2
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d017      	beq.n	800412c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004108:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800410c:	4b5a      	ldr	r3, [pc, #360]	; (8004278 <HAL_UART_IRQHandler+0x2b0>)
 800410e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00b      	beq.n	800412c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2208      	movs	r2, #8
 800411a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004122:	f043 0208 	orr.w	r2, r3, #8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800412c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004134:	2b00      	cmp	r3, #0
 8004136:	d012      	beq.n	800415e <HAL_UART_IRQHandler+0x196>
 8004138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800413c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00c      	beq.n	800415e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800414c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004154:	f043 0220 	orr.w	r2, r3, #32
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 823c 	beq.w	80045e2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800416a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d013      	beq.n	800419e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d105      	bne.n	800418e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b40      	cmp	r3, #64	; 0x40
 80041b4:	d005      	beq.n	80041c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d04f      	beq.n	8004262 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 ffe7 	bl	8005196 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d141      	bne.n	800425a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3308      	adds	r3, #8
 80041dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3308      	adds	r3, #8
 80041fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004202:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800420e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800421a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1d9      	bne.n	80041d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004226:	2b00      	cmp	r3, #0
 8004228:	d013      	beq.n	8004252 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800422e:	4a14      	ldr	r2, [pc, #80]	; (8004280 <HAL_UART_IRQHandler+0x2b8>)
 8004230:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004236:	4618      	mov	r0, r3
 8004238:	f7fd f8a7 	bl	800138a <HAL_DMA_Abort_IT>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d017      	beq.n	8004272 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800424c:	4610      	mov	r0, r2
 800424e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004250:	e00f      	b.n	8004272 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f9ee 	bl	8004634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004258:	e00b      	b.n	8004272 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f9ea 	bl	8004634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004260:	e007      	b.n	8004272 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f9e6 	bl	8004634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004270:	e1b7      	b.n	80045e2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004272:	bf00      	nop
    return;
 8004274:	e1b5      	b.n	80045e2 <HAL_UART_IRQHandler+0x61a>
 8004276:	bf00      	nop
 8004278:	10000001 	.word	0x10000001
 800427c:	04000120 	.word	0x04000120
 8004280:	08005441 	.word	0x08005441

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004288:	2b01      	cmp	r3, #1
 800428a:	f040 814a 	bne.w	8004522 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800428e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8143 	beq.w	8004522 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800429c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 813c 	beq.w	8004522 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2210      	movs	r2, #16
 80042b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b40      	cmp	r3, #64	; 0x40
 80042be:	f040 80b5 	bne.w	800442c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8187 	beq.w	80045e6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042e2:	429a      	cmp	r2, r3
 80042e4:	f080 817f 	bcs.w	80045e6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f040 8086 	bne.w	8004410 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800431c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800432e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004332:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800433a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1da      	bne.n	8004304 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3308      	adds	r3, #8
 8004354:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800435e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3308      	adds	r3, #8
 800436e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004372:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004376:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800437a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e1      	bne.n	800434e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3308      	adds	r3, #8
 8004390:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800439a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800439c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3308      	adds	r3, #8
 80043aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e3      	bne.n	800438a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e0:	f023 0310 	bic.w	r3, r3, #16
 80043e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80043f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e4      	bne.n	80043d0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800440a:	4618      	mov	r0, r3
 800440c:	f7fc ff61 	bl	80012d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800441c:	b29b      	uxth	r3, r3
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	b29b      	uxth	r3, r3
 8004422:	4619      	mov	r1, r3
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f90f 	bl	8004648 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800442a:	e0dc      	b.n	80045e6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004438:	b29b      	uxth	r3, r3
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80ce 	beq.w	80045ea <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800444e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80c9 	beq.w	80045ea <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800446c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800447a:	647b      	str	r3, [r7, #68]	; 0x44
 800447c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004482:	e841 2300 	strex	r3, r2, [r1]
 8004486:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1e4      	bne.n	8004458 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3308      	adds	r3, #8
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	e853 3f00 	ldrex	r3, [r3]
 800449c:	623b      	str	r3, [r7, #32]
   return(result);
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a4:	f023 0301 	bic.w	r3, r3, #1
 80044a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3308      	adds	r3, #8
 80044b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044b6:	633a      	str	r2, [r7, #48]	; 0x30
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044be:	e841 2300 	strex	r3, r2, [r1]
 80044c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e1      	bne.n	800448e <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0310 	bic.w	r3, r3, #16
 80044f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004500:	61fb      	str	r3, [r7, #28]
 8004502:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	69b9      	ldr	r1, [r7, #24]
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	617b      	str	r3, [r7, #20]
   return(result);
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e4      	bne.n	80044de <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004514:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004518:	4619      	mov	r1, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f894 	bl	8004648 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004520:	e063      	b.n	80045ea <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00e      	beq.n	800454c <HAL_UART_IRQHandler+0x584>
 800452e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d008      	beq.n	800454c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004542:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 ffbc 	bl	80054c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800454a:	e051      	b.n	80045f0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800454c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004554:	2b00      	cmp	r3, #0
 8004556:	d014      	beq.n	8004582 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800455c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004560:	2b00      	cmp	r3, #0
 8004562:	d105      	bne.n	8004570 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004568:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d008      	beq.n	8004582 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004574:	2b00      	cmp	r3, #0
 8004576:	d03a      	beq.n	80045ee <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	4798      	blx	r3
    }
    return;
 8004580:	e035      	b.n	80045ee <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <HAL_UART_IRQHandler+0x5da>
 800458e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 ff66 	bl	800546c <UART_EndTransmit_IT>
    return;
 80045a0:	e026      	b.n	80045f0 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80045a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <HAL_UART_IRQHandler+0x5fa>
 80045ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 ff95 	bl	80054ea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045c0:	e016      	b.n	80045f0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d010      	beq.n	80045f0 <HAL_UART_IRQHandler+0x628>
 80045ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	da0c      	bge.n	80045f0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 ff7d 	bl	80054d6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045dc:	e008      	b.n	80045f0 <HAL_UART_IRQHandler+0x628>
      return;
 80045de:	bf00      	nop
 80045e0:	e006      	b.n	80045f0 <HAL_UART_IRQHandler+0x628>
    return;
 80045e2:	bf00      	nop
 80045e4:	e004      	b.n	80045f0 <HAL_UART_IRQHandler+0x628>
      return;
 80045e6:	bf00      	nop
 80045e8:	e002      	b.n	80045f0 <HAL_UART_IRQHandler+0x628>
      return;
 80045ea:	bf00      	nop
 80045ec:	e000      	b.n	80045f0 <HAL_UART_IRQHandler+0x628>
    return;
 80045ee:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80045f0:	37e8      	adds	r7, #232	; 0xe8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop

080045f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004664:	b08c      	sub	sp, #48	; 0x30
 8004666:	af00      	add	r7, sp, #0
 8004668:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	431a      	orrs	r2, r3
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	431a      	orrs	r2, r3
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	4313      	orrs	r3, r2
 8004686:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	4baa      	ldr	r3, [pc, #680]	; (8004938 <UART_SetConfig+0x2d8>)
 8004690:	4013      	ands	r3, r2
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004698:	430b      	orrs	r3, r1
 800469a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a9f      	ldr	r2, [pc, #636]	; (800493c <UART_SetConfig+0x2dc>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d004      	beq.n	80046cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046c8:	4313      	orrs	r3, r2
 80046ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80046d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046e0:	430b      	orrs	r3, r1
 80046e2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	f023 010f 	bic.w	r1, r3, #15
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a90      	ldr	r2, [pc, #576]	; (8004940 <UART_SetConfig+0x2e0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d125      	bne.n	8004750 <UART_SetConfig+0xf0>
 8004704:	4b8f      	ldr	r3, [pc, #572]	; (8004944 <UART_SetConfig+0x2e4>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b03      	cmp	r3, #3
 8004710:	d81a      	bhi.n	8004748 <UART_SetConfig+0xe8>
 8004712:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <UART_SetConfig+0xb8>)
 8004714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004718:	08004729 	.word	0x08004729
 800471c:	08004739 	.word	0x08004739
 8004720:	08004731 	.word	0x08004731
 8004724:	08004741 	.word	0x08004741
 8004728:	2301      	movs	r3, #1
 800472a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800472e:	e116      	b.n	800495e <UART_SetConfig+0x2fe>
 8004730:	2302      	movs	r3, #2
 8004732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004736:	e112      	b.n	800495e <UART_SetConfig+0x2fe>
 8004738:	2304      	movs	r3, #4
 800473a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800473e:	e10e      	b.n	800495e <UART_SetConfig+0x2fe>
 8004740:	2308      	movs	r3, #8
 8004742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004746:	e10a      	b.n	800495e <UART_SetConfig+0x2fe>
 8004748:	2310      	movs	r3, #16
 800474a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800474e:	e106      	b.n	800495e <UART_SetConfig+0x2fe>
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a7c      	ldr	r2, [pc, #496]	; (8004948 <UART_SetConfig+0x2e8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d138      	bne.n	80047cc <UART_SetConfig+0x16c>
 800475a:	4b7a      	ldr	r3, [pc, #488]	; (8004944 <UART_SetConfig+0x2e4>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004760:	f003 030c 	and.w	r3, r3, #12
 8004764:	2b0c      	cmp	r3, #12
 8004766:	d82d      	bhi.n	80047c4 <UART_SetConfig+0x164>
 8004768:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <UART_SetConfig+0x110>)
 800476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476e:	bf00      	nop
 8004770:	080047a5 	.word	0x080047a5
 8004774:	080047c5 	.word	0x080047c5
 8004778:	080047c5 	.word	0x080047c5
 800477c:	080047c5 	.word	0x080047c5
 8004780:	080047b5 	.word	0x080047b5
 8004784:	080047c5 	.word	0x080047c5
 8004788:	080047c5 	.word	0x080047c5
 800478c:	080047c5 	.word	0x080047c5
 8004790:	080047ad 	.word	0x080047ad
 8004794:	080047c5 	.word	0x080047c5
 8004798:	080047c5 	.word	0x080047c5
 800479c:	080047c5 	.word	0x080047c5
 80047a0:	080047bd 	.word	0x080047bd
 80047a4:	2300      	movs	r3, #0
 80047a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047aa:	e0d8      	b.n	800495e <UART_SetConfig+0x2fe>
 80047ac:	2302      	movs	r3, #2
 80047ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047b2:	e0d4      	b.n	800495e <UART_SetConfig+0x2fe>
 80047b4:	2304      	movs	r3, #4
 80047b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ba:	e0d0      	b.n	800495e <UART_SetConfig+0x2fe>
 80047bc:	2308      	movs	r3, #8
 80047be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047c2:	e0cc      	b.n	800495e <UART_SetConfig+0x2fe>
 80047c4:	2310      	movs	r3, #16
 80047c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ca:	e0c8      	b.n	800495e <UART_SetConfig+0x2fe>
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a5e      	ldr	r2, [pc, #376]	; (800494c <UART_SetConfig+0x2ec>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d125      	bne.n	8004822 <UART_SetConfig+0x1c2>
 80047d6:	4b5b      	ldr	r3, [pc, #364]	; (8004944 <UART_SetConfig+0x2e4>)
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047e0:	2b30      	cmp	r3, #48	; 0x30
 80047e2:	d016      	beq.n	8004812 <UART_SetConfig+0x1b2>
 80047e4:	2b30      	cmp	r3, #48	; 0x30
 80047e6:	d818      	bhi.n	800481a <UART_SetConfig+0x1ba>
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d00a      	beq.n	8004802 <UART_SetConfig+0x1a2>
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	d814      	bhi.n	800481a <UART_SetConfig+0x1ba>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <UART_SetConfig+0x19a>
 80047f4:	2b10      	cmp	r3, #16
 80047f6:	d008      	beq.n	800480a <UART_SetConfig+0x1aa>
 80047f8:	e00f      	b.n	800481a <UART_SetConfig+0x1ba>
 80047fa:	2300      	movs	r3, #0
 80047fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004800:	e0ad      	b.n	800495e <UART_SetConfig+0x2fe>
 8004802:	2302      	movs	r3, #2
 8004804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004808:	e0a9      	b.n	800495e <UART_SetConfig+0x2fe>
 800480a:	2304      	movs	r3, #4
 800480c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004810:	e0a5      	b.n	800495e <UART_SetConfig+0x2fe>
 8004812:	2308      	movs	r3, #8
 8004814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004818:	e0a1      	b.n	800495e <UART_SetConfig+0x2fe>
 800481a:	2310      	movs	r3, #16
 800481c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004820:	e09d      	b.n	800495e <UART_SetConfig+0x2fe>
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a4a      	ldr	r2, [pc, #296]	; (8004950 <UART_SetConfig+0x2f0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d125      	bne.n	8004878 <UART_SetConfig+0x218>
 800482c:	4b45      	ldr	r3, [pc, #276]	; (8004944 <UART_SetConfig+0x2e4>)
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004832:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004836:	2bc0      	cmp	r3, #192	; 0xc0
 8004838:	d016      	beq.n	8004868 <UART_SetConfig+0x208>
 800483a:	2bc0      	cmp	r3, #192	; 0xc0
 800483c:	d818      	bhi.n	8004870 <UART_SetConfig+0x210>
 800483e:	2b80      	cmp	r3, #128	; 0x80
 8004840:	d00a      	beq.n	8004858 <UART_SetConfig+0x1f8>
 8004842:	2b80      	cmp	r3, #128	; 0x80
 8004844:	d814      	bhi.n	8004870 <UART_SetConfig+0x210>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <UART_SetConfig+0x1f0>
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d008      	beq.n	8004860 <UART_SetConfig+0x200>
 800484e:	e00f      	b.n	8004870 <UART_SetConfig+0x210>
 8004850:	2300      	movs	r3, #0
 8004852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004856:	e082      	b.n	800495e <UART_SetConfig+0x2fe>
 8004858:	2302      	movs	r3, #2
 800485a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800485e:	e07e      	b.n	800495e <UART_SetConfig+0x2fe>
 8004860:	2304      	movs	r3, #4
 8004862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004866:	e07a      	b.n	800495e <UART_SetConfig+0x2fe>
 8004868:	2308      	movs	r3, #8
 800486a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800486e:	e076      	b.n	800495e <UART_SetConfig+0x2fe>
 8004870:	2310      	movs	r3, #16
 8004872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004876:	e072      	b.n	800495e <UART_SetConfig+0x2fe>
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a35      	ldr	r2, [pc, #212]	; (8004954 <UART_SetConfig+0x2f4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d12a      	bne.n	80048d8 <UART_SetConfig+0x278>
 8004882:	4b30      	ldr	r3, [pc, #192]	; (8004944 <UART_SetConfig+0x2e4>)
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004888:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800488c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004890:	d01a      	beq.n	80048c8 <UART_SetConfig+0x268>
 8004892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004896:	d81b      	bhi.n	80048d0 <UART_SetConfig+0x270>
 8004898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800489c:	d00c      	beq.n	80048b8 <UART_SetConfig+0x258>
 800489e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a2:	d815      	bhi.n	80048d0 <UART_SetConfig+0x270>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <UART_SetConfig+0x250>
 80048a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ac:	d008      	beq.n	80048c0 <UART_SetConfig+0x260>
 80048ae:	e00f      	b.n	80048d0 <UART_SetConfig+0x270>
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048b6:	e052      	b.n	800495e <UART_SetConfig+0x2fe>
 80048b8:	2302      	movs	r3, #2
 80048ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048be:	e04e      	b.n	800495e <UART_SetConfig+0x2fe>
 80048c0:	2304      	movs	r3, #4
 80048c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048c6:	e04a      	b.n	800495e <UART_SetConfig+0x2fe>
 80048c8:	2308      	movs	r3, #8
 80048ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ce:	e046      	b.n	800495e <UART_SetConfig+0x2fe>
 80048d0:	2310      	movs	r3, #16
 80048d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048d6:	e042      	b.n	800495e <UART_SetConfig+0x2fe>
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a17      	ldr	r2, [pc, #92]	; (800493c <UART_SetConfig+0x2dc>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d13a      	bne.n	8004958 <UART_SetConfig+0x2f8>
 80048e2:	4b18      	ldr	r3, [pc, #96]	; (8004944 <UART_SetConfig+0x2e4>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048f0:	d01a      	beq.n	8004928 <UART_SetConfig+0x2c8>
 80048f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048f6:	d81b      	bhi.n	8004930 <UART_SetConfig+0x2d0>
 80048f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048fc:	d00c      	beq.n	8004918 <UART_SetConfig+0x2b8>
 80048fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004902:	d815      	bhi.n	8004930 <UART_SetConfig+0x2d0>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <UART_SetConfig+0x2b0>
 8004908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490c:	d008      	beq.n	8004920 <UART_SetConfig+0x2c0>
 800490e:	e00f      	b.n	8004930 <UART_SetConfig+0x2d0>
 8004910:	2300      	movs	r3, #0
 8004912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004916:	e022      	b.n	800495e <UART_SetConfig+0x2fe>
 8004918:	2302      	movs	r3, #2
 800491a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800491e:	e01e      	b.n	800495e <UART_SetConfig+0x2fe>
 8004920:	2304      	movs	r3, #4
 8004922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004926:	e01a      	b.n	800495e <UART_SetConfig+0x2fe>
 8004928:	2308      	movs	r3, #8
 800492a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800492e:	e016      	b.n	800495e <UART_SetConfig+0x2fe>
 8004930:	2310      	movs	r3, #16
 8004932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004936:	e012      	b.n	800495e <UART_SetConfig+0x2fe>
 8004938:	cfff69f3 	.word	0xcfff69f3
 800493c:	40008000 	.word	0x40008000
 8004940:	40013800 	.word	0x40013800
 8004944:	40021000 	.word	0x40021000
 8004948:	40004400 	.word	0x40004400
 800494c:	40004800 	.word	0x40004800
 8004950:	40004c00 	.word	0x40004c00
 8004954:	40005000 	.word	0x40005000
 8004958:	2310      	movs	r3, #16
 800495a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4aae      	ldr	r2, [pc, #696]	; (8004c1c <UART_SetConfig+0x5bc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	f040 8097 	bne.w	8004a98 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800496a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800496e:	2b08      	cmp	r3, #8
 8004970:	d823      	bhi.n	80049ba <UART_SetConfig+0x35a>
 8004972:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <UART_SetConfig+0x318>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	0800499d 	.word	0x0800499d
 800497c:	080049bb 	.word	0x080049bb
 8004980:	080049a5 	.word	0x080049a5
 8004984:	080049bb 	.word	0x080049bb
 8004988:	080049ab 	.word	0x080049ab
 800498c:	080049bb 	.word	0x080049bb
 8004990:	080049bb 	.word	0x080049bb
 8004994:	080049bb 	.word	0x080049bb
 8004998:	080049b3 	.word	0x080049b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800499c:	f7fd ff24 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 80049a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049a2:	e010      	b.n	80049c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049a4:	4b9e      	ldr	r3, [pc, #632]	; (8004c20 <UART_SetConfig+0x5c0>)
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049a8:	e00d      	b.n	80049c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049aa:	f7fd fe85 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 80049ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049b0:	e009      	b.n	80049c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049b8:	e005      	b.n	80049c6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8130 	beq.w	8004c2e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	4a94      	ldr	r2, [pc, #592]	; (8004c24 <UART_SetConfig+0x5c4>)
 80049d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049d8:	461a      	mov	r2, r3
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	4613      	mov	r3, r2
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	4413      	add	r3, r2
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d305      	bcc.n	80049fe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d903      	bls.n	8004a06 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a04:	e113      	b.n	8004c2e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	2200      	movs	r2, #0
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	60fa      	str	r2, [r7, #12]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	4a84      	ldr	r2, [pc, #528]	; (8004c24 <UART_SetConfig+0x5c4>)
 8004a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	603b      	str	r3, [r7, #0]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a28:	f7fb fbe8 	bl	80001fc <__aeabi_uldivmod>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4610      	mov	r0, r2
 8004a32:	4619      	mov	r1, r3
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	020b      	lsls	r3, r1, #8
 8004a3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a42:	0202      	lsls	r2, r0, #8
 8004a44:	6979      	ldr	r1, [r7, #20]
 8004a46:	6849      	ldr	r1, [r1, #4]
 8004a48:	0849      	lsrs	r1, r1, #1
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	460c      	mov	r4, r1
 8004a4e:	4605      	mov	r5, r0
 8004a50:	eb12 0804 	adds.w	r8, r2, r4
 8004a54:	eb43 0905 	adc.w	r9, r3, r5
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	469a      	mov	sl, r3
 8004a60:	4693      	mov	fp, r2
 8004a62:	4652      	mov	r2, sl
 8004a64:	465b      	mov	r3, fp
 8004a66:	4640      	mov	r0, r8
 8004a68:	4649      	mov	r1, r9
 8004a6a:	f7fb fbc7 	bl	80001fc <__aeabi_uldivmod>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4613      	mov	r3, r2
 8004a74:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a7c:	d308      	bcc.n	8004a90 <UART_SetConfig+0x430>
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a84:	d204      	bcs.n	8004a90 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6a3a      	ldr	r2, [r7, #32]
 8004a8c:	60da      	str	r2, [r3, #12]
 8004a8e:	e0ce      	b.n	8004c2e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a96:	e0ca      	b.n	8004c2e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa0:	d166      	bne.n	8004b70 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004aa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d827      	bhi.n	8004afa <UART_SetConfig+0x49a>
 8004aaa:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <UART_SetConfig+0x450>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004ad5 	.word	0x08004ad5
 8004ab4:	08004add 	.word	0x08004add
 8004ab8:	08004ae5 	.word	0x08004ae5
 8004abc:	08004afb 	.word	0x08004afb
 8004ac0:	08004aeb 	.word	0x08004aeb
 8004ac4:	08004afb 	.word	0x08004afb
 8004ac8:	08004afb 	.word	0x08004afb
 8004acc:	08004afb 	.word	0x08004afb
 8004ad0:	08004af3 	.word	0x08004af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad4:	f7fd fe88 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 8004ad8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ada:	e014      	b.n	8004b06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004adc:	f7fd fe9a 	bl	8002814 <HAL_RCC_GetPCLK2Freq>
 8004ae0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ae2:	e010      	b.n	8004b06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae4:	4b4e      	ldr	r3, [pc, #312]	; (8004c20 <UART_SetConfig+0x5c0>)
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ae8:	e00d      	b.n	8004b06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aea:	f7fd fde5 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8004aee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004af0:	e009      	b.n	8004b06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004af8:	e005      	b.n	8004b06 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8090 	beq.w	8004c2e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	4a44      	ldr	r2, [pc, #272]	; (8004c24 <UART_SetConfig+0x5c4>)
 8004b14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b20:	005a      	lsls	r2, r3, #1
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	085b      	lsrs	r3, r3, #1
 8004b28:	441a      	add	r2, r3
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b32:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	2b0f      	cmp	r3, #15
 8004b38:	d916      	bls.n	8004b68 <UART_SetConfig+0x508>
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b40:	d212      	bcs.n	8004b68 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f023 030f 	bic.w	r3, r3, #15
 8004b4a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	8bfb      	ldrh	r3, [r7, #30]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	8bfa      	ldrh	r2, [r7, #30]
 8004b64:	60da      	str	r2, [r3, #12]
 8004b66:	e062      	b.n	8004c2e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b6e:	e05e      	b.n	8004c2e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d828      	bhi.n	8004bca <UART_SetConfig+0x56a>
 8004b78:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <UART_SetConfig+0x520>)
 8004b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7e:	bf00      	nop
 8004b80:	08004ba5 	.word	0x08004ba5
 8004b84:	08004bad 	.word	0x08004bad
 8004b88:	08004bb5 	.word	0x08004bb5
 8004b8c:	08004bcb 	.word	0x08004bcb
 8004b90:	08004bbb 	.word	0x08004bbb
 8004b94:	08004bcb 	.word	0x08004bcb
 8004b98:	08004bcb 	.word	0x08004bcb
 8004b9c:	08004bcb 	.word	0x08004bcb
 8004ba0:	08004bc3 	.word	0x08004bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba4:	f7fd fe20 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 8004ba8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004baa:	e014      	b.n	8004bd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bac:	f7fd fe32 	bl	8002814 <HAL_RCC_GetPCLK2Freq>
 8004bb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bb2:	e010      	b.n	8004bd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb4:	4b1a      	ldr	r3, [pc, #104]	; (8004c20 <UART_SetConfig+0x5c0>)
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bb8:	e00d      	b.n	8004bd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bba:	f7fd fd7d 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8004bbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bc0:	e009      	b.n	8004bd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bc8:	e005      	b.n	8004bd6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bd4:	bf00      	nop
    }

    if (pclk != 0U)
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d028      	beq.n	8004c2e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	4a10      	ldr	r2, [pc, #64]	; (8004c24 <UART_SetConfig+0x5c4>)
 8004be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004be6:	461a      	mov	r2, r3
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	085b      	lsrs	r3, r3, #1
 8004bf4:	441a      	add	r2, r3
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	2b0f      	cmp	r3, #15
 8004c04:	d910      	bls.n	8004c28 <UART_SetConfig+0x5c8>
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0c:	d20c      	bcs.n	8004c28 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60da      	str	r2, [r3, #12]
 8004c18:	e009      	b.n	8004c2e <UART_SetConfig+0x5ce>
 8004c1a:	bf00      	nop
 8004c1c:	40008000 	.word	0x40008000
 8004c20:	00f42400 	.word	0x00f42400
 8004c24:	08005974 	.word	0x08005974
      }
      else
      {
        ret = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2200      	movs	r2, #0
 8004c42:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2200      	movs	r2, #0
 8004c48:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004c4a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3730      	adds	r7, #48	; 0x30
 8004c52:	46bd      	mov	sp, r7
 8004c54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004c58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01a      	beq.n	8004d6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d56:	d10a      	bne.n	8004d6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	605a      	str	r2, [r3, #4]
  }
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dac:	f7fc f850 	bl	8000e50 <HAL_GetTick>
 8004db0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d10e      	bne.n	8004dde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f82f 	bl	8004e32 <UART_WaitOnFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e025      	b.n	8004e2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d10e      	bne.n	8004e0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f819 	bl	8004e32 <UART_WaitOnFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e00f      	b.n	8004e2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b09c      	sub	sp, #112	; 0x70
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	603b      	str	r3, [r7, #0]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e42:	e0a9      	b.n	8004f98 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4a:	f000 80a5 	beq.w	8004f98 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4e:	f7fb ffff 	bl	8000e50 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d302      	bcc.n	8004e64 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d140      	bne.n	8004ee6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e78:	667b      	str	r3, [r7, #100]	; 0x64
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e84:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e8a:	e841 2300 	strex	r3, r2, [r1]
 8004e8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1e6      	bne.n	8004e64 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	f023 0301 	bic.w	r3, r3, #1
 8004eac:	663b      	str	r3, [r7, #96]	; 0x60
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004eb6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004eb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e5      	bne.n	8004e96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e069      	b.n	8004fba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d051      	beq.n	8004f98 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f02:	d149      	bne.n	8004f98 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f34:	e841 2300 	strex	r3, r2, [r1]
 8004f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e6      	bne.n	8004f0e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3308      	adds	r3, #8
 8004f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f023 0301 	bic.w	r3, r3, #1
 8004f56:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f60:	623a      	str	r2, [r7, #32]
 8004f62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	69f9      	ldr	r1, [r7, #28]
 8004f66:	6a3a      	ldr	r2, [r7, #32]
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e5      	bne.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e010      	b.n	8004fba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69da      	ldr	r2, [r3, #28]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	bf0c      	ite	eq
 8004fa8:	2301      	moveq	r3, #1
 8004faa:	2300      	movne	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	79fb      	ldrb	r3, [r7, #7]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	f43f af46 	beq.w	8004e44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3770      	adds	r7, #112	; 0x70
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b096      	sub	sp, #88	; 0x58
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	88fa      	ldrh	r2, [r7, #6]
 8004fdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2222      	movs	r2, #34	; 0x22
 8004fec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d02c      	beq.n	8005052 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ffc:	4a42      	ldr	r2, [pc, #264]	; (8005108 <UART_Start_Receive_DMA+0x144>)
 8004ffe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005004:	4a41      	ldr	r2, [pc, #260]	; (800510c <UART_Start_Receive_DMA+0x148>)
 8005006:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800500c:	4a40      	ldr	r2, [pc, #256]	; (8005110 <UART_Start_Receive_DMA+0x14c>)
 800500e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005014:	2200      	movs	r2, #0
 8005016:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3324      	adds	r3, #36	; 0x24
 8005022:	4619      	mov	r1, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005028:	461a      	mov	r2, r3
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	f7fc f8d6 	bl	80011dc <HAL_DMA_Start_IT>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00d      	beq.n	8005052 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2210      	movs	r2, #16
 800503a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2220      	movs	r2, #32
 800504a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e055      	b.n	80050fe <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d018      	beq.n	8005094 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506a:	e853 3f00 	ldrex	r3, [r3]
 800506e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005076:	657b      	str	r3, [r7, #84]	; 0x54
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005080:	64bb      	str	r3, [r7, #72]	; 0x48
 8005082:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005084:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005086:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005088:	e841 2300 	strex	r3, r2, [r1]
 800508c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800508e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1e6      	bne.n	8005062 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3308      	adds	r3, #8
 800509a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	f043 0301 	orr.w	r3, r3, #1
 80050aa:	653b      	str	r3, [r7, #80]	; 0x50
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3308      	adds	r3, #8
 80050b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050b4:	637a      	str	r2, [r7, #52]	; 0x34
 80050b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e5      	bne.n	8005094 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3308      	adds	r3, #8
 80050ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	613b      	str	r3, [r7, #16]
   return(result);
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3308      	adds	r3, #8
 80050e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050e8:	623a      	str	r2, [r7, #32]
 80050ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ec:	69f9      	ldr	r1, [r7, #28]
 80050ee:	6a3a      	ldr	r2, [r7, #32]
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e5      	bne.n	80050c8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3758      	adds	r7, #88	; 0x58
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	08005263 	.word	0x08005263
 800510c:	08005389 	.word	0x08005389
 8005110:	080053c1 	.word	0x080053c1

08005114 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005114:	b480      	push	{r7}
 8005116:	b08f      	sub	sp, #60	; 0x3c
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	61fb      	str	r3, [r7, #28]
   return(result);
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005130:	637b      	str	r3, [r7, #52]	; 0x34
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800513c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1e6      	bne.n	800511c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3308      	adds	r3, #8
 8005154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	60bb      	str	r3, [r7, #8]
   return(result);
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005164:	633b      	str	r3, [r7, #48]	; 0x30
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3308      	adds	r3, #8
 800516c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800516e:	61ba      	str	r2, [r7, #24]
 8005170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	6979      	ldr	r1, [r7, #20]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	613b      	str	r3, [r7, #16]
   return(result);
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e5      	bne.n	800514e <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800518a:	bf00      	nop
 800518c:	373c      	adds	r7, #60	; 0x3c
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005196:	b480      	push	{r7}
 8005198:	b095      	sub	sp, #84	; 0x54
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051bc:	643b      	str	r3, [r7, #64]	; 0x40
 80051be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e6      	bne.n	800519e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3308      	adds	r3, #8
 80051d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	e853 3f00 	ldrex	r3, [r3]
 80051de:	61fb      	str	r3, [r7, #28]
   return(result);
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3308      	adds	r3, #8
 80051f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e3      	bne.n	80051d0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800520c:	2b01      	cmp	r3, #1
 800520e:	d118      	bne.n	8005242 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	60bb      	str	r3, [r7, #8]
   return(result);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f023 0310 	bic.w	r3, r3, #16
 8005224:	647b      	str	r3, [r7, #68]	; 0x44
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	6979      	ldr	r1, [r7, #20]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	613b      	str	r3, [r7, #16]
   return(result);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e6      	bne.n	8005210 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005256:	bf00      	nop
 8005258:	3754      	adds	r7, #84	; 0x54
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b09c      	sub	sp, #112	; 0x70
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d171      	bne.n	8005362 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005280:	2200      	movs	r2, #0
 8005282:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800529a:	66bb      	str	r3, [r7, #104]	; 0x68
 800529c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80052a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e6      	bne.n	8005286 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3308      	adds	r3, #8
 80052be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ca:	f023 0301 	bic.w	r3, r3, #1
 80052ce:	667b      	str	r3, [r7, #100]	; 0x64
 80052d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3308      	adds	r3, #8
 80052d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052d8:	647a      	str	r2, [r7, #68]	; 0x44
 80052da:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e5      	bne.n	80052b8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3308      	adds	r3, #8
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	623b      	str	r3, [r7, #32]
   return(result);
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005302:	663b      	str	r3, [r7, #96]	; 0x60
 8005304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3308      	adds	r3, #8
 800530a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800530c:	633a      	str	r2, [r7, #48]	; 0x30
 800530e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e5      	bne.n	80052ec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005322:	2220      	movs	r2, #32
 8005324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d118      	bne.n	8005362 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	60fb      	str	r3, [r7, #12]
   return(result);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f023 0310 	bic.w	r3, r3, #16
 8005344:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800534e:	61fb      	str	r3, [r7, #28]
 8005350:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	69b9      	ldr	r1, [r7, #24]
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	617b      	str	r3, [r7, #20]
   return(result);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e6      	bne.n	8005330 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005366:	2b01      	cmp	r3, #1
 8005368:	d107      	bne.n	800537a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800536a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800536c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005370:	4619      	mov	r1, r3
 8005372:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005374:	f7ff f968 	bl	8004648 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005378:	e002      	b.n	8005380 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800537a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800537c:	f7ff f946 	bl	800460c <HAL_UART_RxCpltCallback>
}
 8005380:	bf00      	nop
 8005382:	3770      	adds	r7, #112	; 0x70
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800539a:	2b01      	cmp	r3, #1
 800539c:	d109      	bne.n	80053b2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053a4:	085b      	lsrs	r3, r3, #1
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	4619      	mov	r1, r3
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f7ff f94c 	bl	8004648 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053b0:	e002      	b.n	80053b8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f7ff f934 	bl	8004620 <HAL_UART_RxHalfCpltCallback>
}
 80053b8:	bf00      	nop
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053cc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053d4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e8:	2b80      	cmp	r3, #128	; 0x80
 80053ea:	d109      	bne.n	8005400 <UART_DMAError+0x40>
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	2b21      	cmp	r3, #33	; 0x21
 80053f0:	d106      	bne.n	8005400 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80053fa:	6978      	ldr	r0, [r7, #20]
 80053fc:	f7ff fe8a 	bl	8005114 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540a:	2b40      	cmp	r3, #64	; 0x40
 800540c:	d109      	bne.n	8005422 <UART_DMAError+0x62>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b22      	cmp	r3, #34	; 0x22
 8005412:	d106      	bne.n	8005422 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2200      	movs	r2, #0
 8005418:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800541c:	6978      	ldr	r0, [r7, #20]
 800541e:	f7ff feba 	bl	8005196 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005428:	f043 0210 	orr.w	r2, r3, #16
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005432:	6978      	ldr	r0, [r7, #20]
 8005434:	f7ff f8fe 	bl	8004634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005438:	bf00      	nop
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f7ff f8e8 	bl	8004634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005464:	bf00      	nop
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	60bb      	str	r3, [r7, #8]
   return(result);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005488:	61fb      	str	r3, [r7, #28]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	6979      	ldr	r1, [r7, #20]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	613b      	str	r3, [r7, #16]
   return(result);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e6      	bne.n	8005474 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7ff f89f 	bl	80045f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ba:	bf00      	nop
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054fe:	b480      	push	{r7}
 8005500:	b085      	sub	sp, #20
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_UARTEx_DisableFifoMode+0x16>
 8005510:	2302      	movs	r3, #2
 8005512:	e027      	b.n	8005564 <HAL_UARTEx_DisableFifoMode+0x66>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2224      	movs	r2, #36	; 0x24
 8005520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005542:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005584:	2302      	movs	r3, #2
 8005586:	e02d      	b.n	80055e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2224      	movs	r2, #36	; 0x24
 8005594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0201 	bic.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f84f 	bl	8005668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005600:	2302      	movs	r3, #2
 8005602:	e02d      	b.n	8005660 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2224      	movs	r2, #36	; 0x24
 8005610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0201 	bic.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f811 	bl	8005668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005674:	2b00      	cmp	r3, #0
 8005676:	d108      	bne.n	800568a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005688:	e031      	b.n	80056ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800568a:	2308      	movs	r3, #8
 800568c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800568e:	2308      	movs	r3, #8
 8005690:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	0e5b      	lsrs	r3, r3, #25
 800569a:	b2db      	uxtb	r3, r3
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	0f5b      	lsrs	r3, r3, #29
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056b2:	7bbb      	ldrb	r3, [r7, #14]
 80056b4:	7b3a      	ldrb	r2, [r7, #12]
 80056b6:	4911      	ldr	r1, [pc, #68]	; (80056fc <UARTEx_SetNbDataToProcess+0x94>)
 80056b8:	5c8a      	ldrb	r2, [r1, r2]
 80056ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056be:	7b3a      	ldrb	r2, [r7, #12]
 80056c0:	490f      	ldr	r1, [pc, #60]	; (8005700 <UARTEx_SetNbDataToProcess+0x98>)
 80056c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	7b7a      	ldrb	r2, [r7, #13]
 80056d4:	4909      	ldr	r1, [pc, #36]	; (80056fc <UARTEx_SetNbDataToProcess+0x94>)
 80056d6:	5c8a      	ldrb	r2, [r1, r2]
 80056d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056dc:	7b7a      	ldrb	r2, [r7, #13]
 80056de:	4908      	ldr	r1, [pc, #32]	; (8005700 <UARTEx_SetNbDataToProcess+0x98>)
 80056e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056ee:	bf00      	nop
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	0800598c 	.word	0x0800598c
 8005700:	08005994 	.word	0x08005994

08005704 <__libc_init_array>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	4d0d      	ldr	r5, [pc, #52]	; (800573c <__libc_init_array+0x38>)
 8005708:	4c0d      	ldr	r4, [pc, #52]	; (8005740 <__libc_init_array+0x3c>)
 800570a:	1b64      	subs	r4, r4, r5
 800570c:	10a4      	asrs	r4, r4, #2
 800570e:	2600      	movs	r6, #0
 8005710:	42a6      	cmp	r6, r4
 8005712:	d109      	bne.n	8005728 <__libc_init_array+0x24>
 8005714:	4d0b      	ldr	r5, [pc, #44]	; (8005744 <__libc_init_array+0x40>)
 8005716:	4c0c      	ldr	r4, [pc, #48]	; (8005748 <__libc_init_array+0x44>)
 8005718:	f000 f8fc 	bl	8005914 <_init>
 800571c:	1b64      	subs	r4, r4, r5
 800571e:	10a4      	asrs	r4, r4, #2
 8005720:	2600      	movs	r6, #0
 8005722:	42a6      	cmp	r6, r4
 8005724:	d105      	bne.n	8005732 <__libc_init_array+0x2e>
 8005726:	bd70      	pop	{r4, r5, r6, pc}
 8005728:	f855 3b04 	ldr.w	r3, [r5], #4
 800572c:	4798      	blx	r3
 800572e:	3601      	adds	r6, #1
 8005730:	e7ee      	b.n	8005710 <__libc_init_array+0xc>
 8005732:	f855 3b04 	ldr.w	r3, [r5], #4
 8005736:	4798      	blx	r3
 8005738:	3601      	adds	r6, #1
 800573a:	e7f2      	b.n	8005722 <__libc_init_array+0x1e>
 800573c:	080059c4 	.word	0x080059c4
 8005740:	080059c4 	.word	0x080059c4
 8005744:	080059c4 	.word	0x080059c4
 8005748:	080059c8 	.word	0x080059c8

0800574c <memset>:
 800574c:	4402      	add	r2, r0
 800574e:	4603      	mov	r3, r0
 8005750:	4293      	cmp	r3, r2
 8005752:	d100      	bne.n	8005756 <memset+0xa>
 8005754:	4770      	bx	lr
 8005756:	f803 1b01 	strb.w	r1, [r3], #1
 800575a:	e7f9      	b.n	8005750 <memset+0x4>

0800575c <atanf>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	ee10 5a10 	vmov	r5, s0
 8005762:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8005766:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800576a:	eef0 7a40 	vmov.f32	s15, s0
 800576e:	db10      	blt.n	8005792 <atanf+0x36>
 8005770:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005774:	dd04      	ble.n	8005780 <atanf+0x24>
 8005776:	ee70 7a00 	vadd.f32	s15, s0, s0
 800577a:	eeb0 0a67 	vmov.f32	s0, s15
 800577e:	bd38      	pop	{r3, r4, r5, pc}
 8005780:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80058b8 <atanf+0x15c>
 8005784:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80058bc <atanf+0x160>
 8005788:	2d00      	cmp	r5, #0
 800578a:	bfd8      	it	le
 800578c:	eef0 7a40 	vmovle.f32	s15, s0
 8005790:	e7f3      	b.n	800577a <atanf+0x1e>
 8005792:	4b4b      	ldr	r3, [pc, #300]	; (80058c0 <atanf+0x164>)
 8005794:	429c      	cmp	r4, r3
 8005796:	dc10      	bgt.n	80057ba <atanf+0x5e>
 8005798:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800579c:	da0a      	bge.n	80057b4 <atanf+0x58>
 800579e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80058c4 <atanf+0x168>
 80057a2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80057a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057aa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80057ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b2:	dce2      	bgt.n	800577a <atanf+0x1e>
 80057b4:	f04f 33ff 	mov.w	r3, #4294967295
 80057b8:	e013      	b.n	80057e2 <atanf+0x86>
 80057ba:	f000 f8a3 	bl	8005904 <fabsf>
 80057be:	4b42      	ldr	r3, [pc, #264]	; (80058c8 <atanf+0x16c>)
 80057c0:	429c      	cmp	r4, r3
 80057c2:	dc4f      	bgt.n	8005864 <atanf+0x108>
 80057c4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80057c8:	429c      	cmp	r4, r3
 80057ca:	dc41      	bgt.n	8005850 <atanf+0xf4>
 80057cc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80057d0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80057d4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80057d8:	2300      	movs	r3, #0
 80057da:	ee30 0a27 	vadd.f32	s0, s0, s15
 80057de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80057e8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80058cc <atanf+0x170>
 80057ec:	eddf 5a38 	vldr	s11, [pc, #224]	; 80058d0 <atanf+0x174>
 80057f0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80058d4 <atanf+0x178>
 80057f4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80057f8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80057fc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80058d8 <atanf+0x17c>
 8005800:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005804:	eddf 5a35 	vldr	s11, [pc, #212]	; 80058dc <atanf+0x180>
 8005808:	eee7 5a26 	vfma.f32	s11, s14, s13
 800580c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80058e0 <atanf+0x184>
 8005810:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005814:	eddf 5a33 	vldr	s11, [pc, #204]	; 80058e4 <atanf+0x188>
 8005818:	eee7 5a26 	vfma.f32	s11, s14, s13
 800581c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80058e8 <atanf+0x18c>
 8005820:	eea6 5a87 	vfma.f32	s10, s13, s14
 8005824:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80058ec <atanf+0x190>
 8005828:	eea5 7a26 	vfma.f32	s14, s10, s13
 800582c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80058f0 <atanf+0x194>
 8005830:	eea7 5a26 	vfma.f32	s10, s14, s13
 8005834:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80058f4 <atanf+0x198>
 8005838:	eea5 7a26 	vfma.f32	s14, s10, s13
 800583c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005840:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005844:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005848:	d121      	bne.n	800588e <atanf+0x132>
 800584a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800584e:	e794      	b.n	800577a <atanf+0x1e>
 8005850:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005854:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005858:	ee30 0a27 	vadd.f32	s0, s0, s15
 800585c:	2301      	movs	r3, #1
 800585e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005862:	e7be      	b.n	80057e2 <atanf+0x86>
 8005864:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <atanf+0x19c>)
 8005866:	429c      	cmp	r4, r3
 8005868:	dc0b      	bgt.n	8005882 <atanf+0x126>
 800586a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800586e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005872:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005876:	2302      	movs	r3, #2
 8005878:	ee70 6a67 	vsub.f32	s13, s0, s15
 800587c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005880:	e7af      	b.n	80057e2 <atanf+0x86>
 8005882:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005886:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800588a:	2303      	movs	r3, #3
 800588c:	e7a9      	b.n	80057e2 <atanf+0x86>
 800588e:	4a1b      	ldr	r2, [pc, #108]	; (80058fc <atanf+0x1a0>)
 8005890:	491b      	ldr	r1, [pc, #108]	; (8005900 <atanf+0x1a4>)
 8005892:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005896:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800589a:	ed93 0a00 	vldr	s0, [r3]
 800589e:	ee37 7a40 	vsub.f32	s14, s14, s0
 80058a2:	ed92 0a00 	vldr	s0, [r2]
 80058a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058aa:	2d00      	cmp	r5, #0
 80058ac:	ee70 7a67 	vsub.f32	s15, s0, s15
 80058b0:	bfb8      	it	lt
 80058b2:	eef1 7a67 	vneglt.f32	s15, s15
 80058b6:	e760      	b.n	800577a <atanf+0x1e>
 80058b8:	3fc90fdb 	.word	0x3fc90fdb
 80058bc:	bfc90fdb 	.word	0xbfc90fdb
 80058c0:	3edfffff 	.word	0x3edfffff
 80058c4:	7149f2ca 	.word	0x7149f2ca
 80058c8:	3f97ffff 	.word	0x3f97ffff
 80058cc:	3c8569d7 	.word	0x3c8569d7
 80058d0:	3d4bda59 	.word	0x3d4bda59
 80058d4:	bd6ef16b 	.word	0xbd6ef16b
 80058d8:	3d886b35 	.word	0x3d886b35
 80058dc:	3dba2e6e 	.word	0x3dba2e6e
 80058e0:	3e124925 	.word	0x3e124925
 80058e4:	3eaaaaab 	.word	0x3eaaaaab
 80058e8:	bd15a221 	.word	0xbd15a221
 80058ec:	bd9d8795 	.word	0xbd9d8795
 80058f0:	bde38e38 	.word	0xbde38e38
 80058f4:	be4ccccd 	.word	0xbe4ccccd
 80058f8:	401bffff 	.word	0x401bffff
 80058fc:	0800599c 	.word	0x0800599c
 8005900:	080059ac 	.word	0x080059ac

08005904 <fabsf>:
 8005904:	ee10 3a10 	vmov	r3, s0
 8005908:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800590c:	ee00 3a10 	vmov	s0, r3
 8005910:	4770      	bx	lr
	...

08005914 <_init>:
 8005914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005916:	bf00      	nop
 8005918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800591a:	bc08      	pop	{r3}
 800591c:	469e      	mov	lr, r3
 800591e:	4770      	bx	lr

08005920 <_fini>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	bf00      	nop
 8005924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005926:	bc08      	pop	{r3}
 8005928:	469e      	mov	lr, r3
 800592a:	4770      	bx	lr
